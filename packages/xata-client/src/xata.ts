// Generated by Xata Codegen 0.30.1. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "categories",
    checkConstraints: {},
    foreignKeys: {
      categories_parent_id_fkey: {
        name: "categories_parent_id_fkey",
        columns: ["parent_id"],
        referencedTable: "categories",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["id"],
    uniqueConstraints: {
      categories_slug_key: { name: "categories_slug_key", columns: ["slug"] },
    },
    columns: [
      {
        name: "description",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "display_order",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
      {
        name: "id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue:
          "('rec_'::text || replace((gen_random_uuid())::text, '-'::text, ''::text))",
        comment: "",
      },
      {
        name: "image_url",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "is_active",
        type: "bool",
        notNull: true,
        unique: false,
        defaultValue: "true",
        comment: "",
      },
      {
        name: "name",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "parent_id",
        type: "link",
        link: { table: "categories" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "slug",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "order_items",
    checkConstraints: {
      order_items_price_check: {
        name: "order_items_price_check",
        columns: ["price"],
        definition: "CHECK ((price >= (0)::numeric))",
      },
      order_items_quantity_check: {
        name: "order_items_quantity_check",
        columns: ["quantity"],
        definition: "CHECK ((quantity > 0))",
      },
      order_items_status_check: {
        name: "order_items_status_check",
        columns: ["status"],
        definition:
          "CHECK ((status = ANY (ARRAY['pending'::text, 'confirmed'::text, 'shipped'::text, 'delivered'::text, 'cancelled'::text, 'refunded'::text])))",
      },
      order_items_total_check: {
        name: "order_items_total_check",
        columns: ["total"],
        definition: "CHECK ((total >= (0)::numeric))",
      },
    },
    foreignKeys: {
      order_items_order_id_fkey: {
        name: "order_items_order_id_fkey",
        columns: ["order_id"],
        referencedTable: "orders",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
      order_items_product_id_fkey: {
        name: "order_items_product_id_fkey",
        columns: ["product_id"],
        referencedTable: "products",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
      order_items_seller_id_fkey: {
        name: "order_items_seller_id_fkey",
        columns: ["seller_id"],
        referencedTable: "sellers",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue:
          "('rec_'::text || replace((gen_random_uuid())::text, '-'::text, ''::text))",
        comment: "",
      },
      {
        name: "order_id",
        type: "link",
        link: { table: "orders" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "price",
        type: "float",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "product_id",
        type: "link",
        link: { table: "products" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "quantity",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "seller_id",
        type: "link",
        link: { table: "sellers" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "status",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "total",
        type: "float",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "orders",
    checkConstraints: {
      orders_discount_check: {
        name: "orders_discount_check",
        columns: ["discount"],
        definition: "CHECK ((discount >= (0)::numeric))",
      },
      orders_payment_status_check: {
        name: "orders_payment_status_check",
        columns: ["payment_status"],
        definition:
          "CHECK ((payment_status = ANY (ARRAY['pending'::text, 'paid'::text, 'failed'::text, 'refunded'::text])))",
      },
      orders_shipping_cost_check: {
        name: "orders_shipping_cost_check",
        columns: ["shipping_cost"],
        definition: "CHECK ((shipping_cost >= (0)::numeric))",
      },
      orders_status_check: {
        name: "orders_status_check",
        columns: ["status"],
        definition:
          "CHECK ((status = ANY (ARRAY['pending'::text, 'processing'::text, 'shipped'::text, 'delivered'::text, 'cancelled'::text, 'refunded'::text])))",
      },
      orders_subtotal_check: {
        name: "orders_subtotal_check",
        columns: ["subtotal"],
        definition: "CHECK ((subtotal >= (0)::numeric))",
      },
      orders_total_check: {
        name: "orders_total_check",
        columns: ["total"],
        definition: "CHECK ((total >= (0)::numeric))",
      },
    },
    foreignKeys: {
      orders_user_id_fkey: {
        name: "orders_user_id_fkey",
        columns: ["user_id"],
        referencedTable: "users",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["id"],
    uniqueConstraints: {
      orders_order_number_key: {
        name: "orders_order_number_key",
        columns: ["order_number"],
      },
    },
    columns: [
      {
        name: "billing_address",
        type: "json",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "discount",
        type: "float",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
      {
        name: "id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue:
          "('rec_'::text || replace((gen_random_uuid())::text, '-'::text, ''::text))",
        comment: "",
      },
      {
        name: "metadata",
        type: "json",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "notes",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "order_number",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "payment_method",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "payment_status",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "shipping_address",
        type: "json",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "shipping_cost",
        type: "float",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
      {
        name: "status",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "subtotal",
        type: "float",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "total",
        type: "float",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "user_id",
        type: "link",
        link: { table: "users" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "products",
    checkConstraints: {
      products_compare_at_price_check: {
        name: "products_compare_at_price_check",
        columns: ["compare_at_price"],
        definition: "CHECK ((compare_at_price >= (0)::numeric))",
      },
      products_cost_check: {
        name: "products_cost_check",
        columns: ["cost"],
        definition: "CHECK ((cost >= (0)::numeric))",
      },
      products_price_check: {
        name: "products_price_check",
        columns: ["price"],
        definition: "CHECK ((price >= (0)::numeric))",
      },
      products_stock_quantity_check: {
        name: "products_stock_quantity_check",
        columns: ["stock_quantity"],
        definition: "CHECK ((stock_quantity >= 0))",
      },
    },
    foreignKeys: {
      products_category_id_fkey: {
        name: "products_category_id_fkey",
        columns: ["category_id"],
        referencedTable: "categories",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
      products_seller_id_fkey: {
        name: "products_seller_id_fkey",
        columns: ["seller_id"],
        referencedTable: "sellers",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["id"],
    uniqueConstraints: {
      products_sku_key: { name: "products_sku_key", columns: ["sku"] },
      products_slug_key: { name: "products_slug_key", columns: ["slug"] },
    },
    columns: [
      {
        name: "barcode",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "category_id",
        type: "link",
        link: { table: "categories" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "compare_at_price",
        type: "float",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "cost",
        type: "float",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "description",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "dimensions",
        type: "json",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue:
          "('rec_'::text || replace((gen_random_uuid())::text, '-'::text, ''::text))",
        comment: "",
      },
      {
        name: "images",
        type: "json",
        notNull: true,
        unique: false,
        defaultValue: "'[]'::jsonb",
        comment: "",
      },
      {
        name: "is_active",
        type: "bool",
        notNull: true,
        unique: false,
        defaultValue: "true",
        comment: "",
      },
      {
        name: "is_featured",
        type: "bool",
        notNull: true,
        unique: false,
        defaultValue: "false",
        comment: "",
      },
      {
        name: "metadata",
        type: "json",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "name",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "price",
        type: "float",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "seller_id",
        type: "link",
        link: { table: "sellers" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "sku",
        type: "text",
        notNull: false,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "slug",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "stock_location",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "stock_quantity",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
      {
        name: "tags",
        type: "json",
        notNull: false,
        unique: false,
        defaultValue: "'[]'::jsonb",
        comment: "",
      },
      {
        name: "weight",
        type: "float",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "sellers",
    checkConstraints: {
      sellers_rating_check: {
        name: "sellers_rating_check",
        columns: ["rating"],
        definition:
          "CHECK (((rating >= (0)::numeric) AND (rating <= (5)::numeric)))",
      },
    },
    foreignKeys: {
      sellers_user_id_fkey: {
        name: "sellers_user_id_fkey",
        columns: ["user_id"],
        referencedTable: "users",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["id"],
    uniqueConstraints: {
      sellers_company_document_key: {
        name: "sellers_company_document_key",
        columns: ["company_document"],
      },
      sellers_user_id_key: {
        name: "sellers_user_id_key",
        columns: ["user_id"],
      },
    },
    columns: [
      {
        name: "banner_url",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "company_document",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "company_name",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "description",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue:
          "('rec_'::text || replace((gen_random_uuid())::text, '-'::text, ''::text))",
        comment: "",
      },
      {
        name: "is_active",
        type: "bool",
        notNull: true,
        unique: false,
        defaultValue: "true",
        comment: "",
      },
      {
        name: "is_verified",
        type: "bool",
        notNull: true,
        unique: false,
        defaultValue: "false",
        comment: "",
      },
      {
        name: "logo_url",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "rating",
        type: "float",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
      {
        name: "total_sales",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
      {
        name: "user_id",
        type: "link",
        link: { table: "users" },
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
  {
    name: "users",
    checkConstraints: {
      users_role_check: {
        name: "users_role_check",
        columns: ["role"],
        definition:
          "CHECK ((role = ANY (ARRAY['customer'::text, 'seller'::text, 'admin'::text])))",
      },
    },
    foreignKeys: {},
    primaryKey: ["id"],
    uniqueConstraints: {
      users_cpf_cnpj_key: { name: "users_cpf_cnpj_key", columns: ["cpf_cnpj"] },
      users_email_key: { name: "users_email_key", columns: ["email"] },
    },
    columns: [
      {
        name: "avatar_url",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "cpf_cnpj",
        type: "text",
        notNull: false,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "email",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "text",
        notNull: true,
        unique: true,
        defaultValue:
          "('rec_'::text || replace((gen_random_uuid())::text, '-'::text, ''::text))",
        comment: "",
      },
      {
        name: "is_active",
        type: "bool",
        notNull: true,
        unique: false,
        defaultValue: "true",
        comment: "",
      },
      {
        name: "name",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "password_hash",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "phone",
        type: "text",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "role",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "xata_createdat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_updatedat",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "xata_version",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Categories = InferredTypes["categories"];
export type CategoriesRecord = Categories & XataRecord;

export type OrderItems = InferredTypes["order_items"];
export type OrderItemsRecord = OrderItems & XataRecord;

export type Orders = InferredTypes["orders"];
export type OrdersRecord = Orders & XataRecord;

export type Products = InferredTypes["products"];
export type ProductsRecord = Products & XataRecord;

export type Sellers = InferredTypes["sellers"];
export type SellersRecord = Sellers & XataRecord;

export type Users = InferredTypes["users"];
export type UsersRecord = Users & XataRecord;

export type DatabaseSchema = {
  categories: CategoriesRecord;
  order_items: OrderItemsRecord;
  orders: OrdersRecord;
  products: ProductsRecord;
  sellers: SellersRecord;
  users: UsersRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://GUSTAVO-FERRO-s-workspace-787mk0.us-east-1.xata.sh/db/mktplace-gdg",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
