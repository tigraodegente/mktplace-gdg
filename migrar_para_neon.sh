#!/bin/bash

# =====================================================
# MIGRA√á√ÉO COMPLETA PARA NEON POSTGRESQL
# =====================================================
# Este script migra TODOS os dados do banco local para o Neon
# Inclui: estrutura, dados, √≠ndices, triggers e tudo mais
# =====================================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_step() {
    echo -e "${PURPLE}üîÑ $1${NC}"
}

# Banner de in√≠cio
echo ""
echo "‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó"
echo "‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë"
echo "‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë"
echo "‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë"
echo "‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù    ‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë"
echo "‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù     ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù"
echo ""
echo "üöÄ MIGRA√á√ÉO COMPLETA PARA NEON POSTGRESQL"
echo "üì¶ Migraremos TODOS os dados do marketplace (46MB, 101 tabelas)"
echo ""

# Verificar depend√™ncias
log_step "Verificando depend√™ncias..."

if ! command -v psql &> /dev/null; then
    log_error "PostgreSQL n√£o encontrado. Instale usando:"
    echo "  macOS: brew install postgresql"
    echo "  Ubuntu: sudo apt install postgresql postgresql-contrib"
    exit 1
fi

if ! command -v pg_dump &> /dev/null; then
    log_error "pg_dump n√£o encontrado. Instale o PostgreSQL completo."
    exit 1
fi

log_success "Depend√™ncias OK"

# Configura√ß√µes do banco local
LOCAL_DATABASE_URL="postgresql://mktplace_user:123456@localhost:5432/mktplace_dev"

# Solicitar configura√ß√µes do Neon
echo ""
log_info "üìù CONFIGURA√á√ÉO DO NEON POSTGRESQL"
echo ""
echo "Voc√™ precisar√° das seguintes informa√ß√µes do seu projeto Neon:"
echo "  1. Host/Endpoint (ex: ep-example-123.us-east-1.aws.neon.tech)"
echo "  2. Nome do banco (ex: mktplace_prod)"
echo "  3. Usu√°rio (geralmente seu email ou username)"
echo "  4. Senha"
echo ""

# Coletar informa√ß√µes do Neon
read -p "üìç Host do Neon (ex: ep-example.us-east-1.aws.neon.tech): " NEON_HOST
if [ -z "$NEON_HOST" ]; then
    log_error "Host do Neon √© obrigat√≥rio"
    exit 1
fi

read -p "üóÑÔ∏è  Nome do banco (ex: mktplace_prod): " NEON_DATABASE
if [ -z "$NEON_DATABASE" ]; then
    NEON_DATABASE="mktplace_prod"
    log_info "Usando nome padr√£o: $NEON_DATABASE"
fi

read -p "üë§ Usu√°rio do Neon: " NEON_USER
if [ -z "$NEON_USER" ]; then
    log_error "Usu√°rio do Neon √© obrigat√≥rio"
    exit 1
fi

read -s -p "üîë Senha do Neon: " NEON_PASSWORD
echo ""
if [ -z "$NEON_PASSWORD" ]; then
    log_error "Senha do Neon √© obrigat√≥ria"
    exit 1
fi

# Montar URL do Neon
NEON_DATABASE_URL="postgresql://${NEON_USER}:${NEON_PASSWORD}@${NEON_HOST}/${NEON_DATABASE}?sslmode=require"

echo ""
log_info "üîó URL montada: postgresql://${NEON_USER}:***@${NEON_HOST}/${NEON_DATABASE}"

# Testar conex√£o local
log_step "Testando conex√£o com banco local..."
if ! psql "$LOCAL_DATABASE_URL" -c "SELECT 1;" &> /dev/null; then
    log_error "Erro ao conectar no banco local. Verifique se PostgreSQL est√° rodando."
    exit 1
fi
log_success "Conex√£o local OK"

# Testar conex√£o Neon
log_step "Testando conex√£o com Neon..."
if ! psql "$NEON_DATABASE_URL" -c "SELECT 1;" &> /dev/null; then
    log_error "Erro ao conectar no Neon. Verifique suas credenciais."
    exit 1
fi
log_success "Conex√£o Neon OK"

# Verificar dados locais
log_step "Analisando dados locais..."
TABLE_COUNT=$(psql "$LOCAL_DATABASE_URL" -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema='public';" | tr -d ' ')
TOTAL_RECORDS=$(psql "$LOCAL_DATABASE_URL" -t -c "
    SELECT SUM(n_live_tup) 
    FROM pg_stat_user_tables;
" | tr -d ' ')

echo "  üìä Tabelas: $TABLE_COUNT"
echo "  üìã Registros totais: $TOTAL_RECORDS"

# Verificar se h√° dados suficientes
if [ "$TABLE_COUNT" -lt "50" ]; then
    log_warning "Poucas tabelas encontradas ($TABLE_COUNT). Continuar mesmo assim?"
    read -p "Continuar? (s/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Ss]$ ]]; then
        exit 0
    fi
fi

# Criar timestamp para backup
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
BACKUP_FILE="exports/neon_migration_${TIMESTAMP}.sql"

# Criar pasta exports se n√£o existir
mkdir -p exports

# Confirmar migra√ß√£o
echo ""
log_warning "‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√°:"
echo "  üîÑ Fazer backup completo do banco local"
echo "  üóëÔ∏è  Limpar completamente o banco Neon"
echo "  üì§ Transferir TODOS os dados (estrutura + registros)"
echo "  ‚è±Ô∏è  Pode demorar v√°rios minutos"
echo ""
read -p "üöÄ Continuar com a migra√ß√£o? (s/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Ss]$ ]]; then
    log_info "Migra√ß√£o cancelada pelo usu√°rio"
    exit 0
fi

# ETAPA 1: Backup completo
echo ""
log_step "üóÇÔ∏è  ETAPA 1/4: Criando backup completo..."
pg_dump "$LOCAL_DATABASE_URL" \
    --verbose \
    --clean \
    --if-exists \
    --create \
    --format=plain \
    --encoding=UTF8 \
    --no-owner \
    --no-privileges \
    --quote-all-identifiers \
    > "$BACKUP_FILE"

if [ $? -eq 0 ]; then
    BACKUP_SIZE=$(du -h "$BACKUP_FILE" | cut -f1)
    log_success "Backup criado: $BACKUP_FILE ($BACKUP_SIZE)"
else
    log_error "Erro ao criar backup"
    exit 1
fi

# ETAPA 2: Preparar Neon
echo ""
log_step "üßπ ETAPA 2/4: Preparando banco Neon..."

# Limpar banco Neon (dropar todas as tabelas)
log_info "Limpando banco Neon..."
psql "$NEON_DATABASE_URL" -c "
    DO \$\$ 
    DECLARE 
        r RECORD;
    BEGIN
        -- Dropar todas as tabelas
        FOR r IN (SELECT tablename FROM pg_tables WHERE schemaname = 'public') 
        LOOP
            EXECUTE 'DROP TABLE IF EXISTS ' || quote_ident(r.tablename) || ' CASCADE';
        END LOOP;
        
        -- Dropar todas as sequ√™ncias
        FOR r IN (SELECT sequence_name FROM information_schema.sequences WHERE sequence_schema = 'public') 
        LOOP
            EXECUTE 'DROP SEQUENCE IF EXISTS ' || quote_ident(r.sequence_name) || ' CASCADE';
        END LOOP;
        
        -- Dropar todas as fun√ß√µes
        FOR r IN (SELECT proname FROM pg_proc WHERE pronamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'public'))
        LOOP
            EXECUTE 'DROP FUNCTION IF EXISTS ' || quote_ident(r.proname) || ' CASCADE';
        END LOOP;
    END 
    \$\$;
" 2>/dev/null || log_warning "Algumas opera√ß√µes de limpeza falharam (normal se banco estava vazio)"

# Criar extens√µes necess√°rias
log_info "Criando extens√µes..."
psql "$NEON_DATABASE_URL" -c "
    CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";
    CREATE EXTENSION IF NOT EXISTS \"pg_trgm\";
    CREATE EXTENSION IF NOT EXISTS \"btree_gin\";
    CREATE EXTENSION IF NOT EXISTS \"btree_gist\";
" 2>/dev/null || log_warning "Algumas extens√µes podem n√£o estar dispon√≠veis"

log_success "Banco Neon preparado"

# ETAPA 3: Transferir dados
echo ""
log_step "üì§ ETAPA 3/4: Transferindo dados para Neon..."
echo "  ‚è±Ô∏è  Isso pode demorar v√°rios minutos..."

# Modificar backup para funcionar no Neon
log_info "Ajustando backup para Neon..."
NEON_BACKUP_FILE="exports/neon_adjusted_${TIMESTAMP}.sql"

# Remover comandos problem√°ticos e ajustar para Neon
sed -e '/^DROP DATABASE/d' \
    -e '/^CREATE DATABASE/d' \
    -e '/^\\connect/d' \
    -e 's/OWNER TO [^;]*//' \
    -e '/^GRANT.*ON SCHEMA/d' \
    -e '/^REVOKE.*ON SCHEMA/d' \
    "$BACKUP_FILE" > "$NEON_BACKUP_FILE"

# Importar no Neon
log_info "Executando import no Neon..."
if psql "$NEON_DATABASE_URL" -f "$NEON_BACKUP_FILE" > /tmp/neon_import.log 2>&1; then
    log_success "Dados transferidos com sucesso!"
else
    log_warning "Houve alguns avisos durante a importa√ß√£o. Verificando..."
    
    # Verificar se erros s√£o cr√≠ticos
    if grep -i "error\|fatal" /tmp/neon_import.log > /dev/null; then
        log_error "Erros cr√≠ticos encontrados:"
        grep -i "error\|fatal" /tmp/neon_import.log | head -5
        echo ""
        log_info "Log completo: /tmp/neon_import.log"
        exit 1
    else
        log_success "Avisos n√£o cr√≠ticos, continuando..."
    fi
fi

# ETAPA 4: Valida√ß√£o
echo ""
log_step "‚úÖ ETAPA 4/4: Validando migra√ß√£o..."

# Comparar contagens
echo ""
log_info "Comparando dados entre local e Neon..."

# Contar tabelas
LOCAL_TABLES=$(psql "$LOCAL_DATABASE_URL" -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema='public';" | tr -d ' ')
NEON_TABLES=$(psql "$NEON_DATABASE_URL" -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema='public';" | tr -d ' ')

echo "  üìä Tabelas Local: $LOCAL_TABLES"
echo "  üìä Tabelas Neon:  $NEON_TABLES"

if [ "$LOCAL_TABLES" -eq "$NEON_TABLES" ]; then
    log_success "N√∫mero de tabelas OK"
else
    log_warning "Diferen√ßa no n√∫mero de tabelas"
fi

# Verificar tabelas principais
echo ""
log_info "Verificando registros das tabelas principais:"

for table in users products categories orders cart_items sellers; do
    LOCAL_COUNT=$(psql "$LOCAL_DATABASE_URL" -t -c "SELECT COUNT(*) FROM $table;" 2>/dev/null | tr -d ' ')
    NEON_COUNT=$(psql "$NEON_DATABASE_URL" -t -c "SELECT COUNT(*) FROM $table;" 2>/dev/null | tr -d ' ')
    
    if [ ! -z "$LOCAL_COUNT" ] && [ ! -z "$NEON_COUNT" ]; then
        if [ "$LOCAL_COUNT" -eq "$NEON_COUNT" ]; then
            log_success "  $table: $LOCAL_COUNT ‚úì"
        else
            log_warning "  $table: Local($LOCAL_COUNT) ‚â† Neon($NEON_COUNT)"
        fi
    else
        log_warning "  $table: erro ao verificar"
    fi
done

# Testar algumas opera√ß√µes b√°sicas
echo ""
log_info "Testando opera√ß√µes b√°sicas no Neon..."

# Testar SELECT
if psql "$NEON_DATABASE_URL" -c "SELECT COUNT(*) FROM users;" &> /dev/null; then
    log_success "‚úì SELECT funcionando"
else
    log_error "‚úó Erro no SELECT"
fi

# Testar INSERT
if psql "$NEON_DATABASE_URL" -c "
    INSERT INTO users (email, name, password_hash, role) 
    VALUES ('teste_migracao@test.com', 'Teste Migra√ß√£o', 'hash123', 'customer');
    DELETE FROM users WHERE email = 'teste_migracao@test.com';
" &> /dev/null; then
    log_success "‚úì INSERT/DELETE funcionando"
else
    log_warning "‚úó Problemas com INSERT/DELETE"
fi

# Criar arquivo .env atualizado
echo ""
log_step "üìù Atualizando configura√ß√µes..."

# Backup do .env atual
if [ -f .env ]; then
    cp .env .env.backup_$(date +%s)
    log_info "Backup do .env criado"
fi

# Criar novo .env com Neon
cat > .env << EOF
# =====================================================
# CONFIGURA√á√ïES DO MARKETPLACE - NEON POSTGRESQL
# Migrado automaticamente em $(date)
# =====================================================

# BANCO DE DADOS NEON (PRODU√á√ÉO)
DATABASE_URL="$NEON_DATABASE_URL"
HYPERDRIVE_BINDING="false"

# BACKUP LOCAL (comentado)
# DATABASE_URL_LOCAL="$LOCAL_DATABASE_URL"

# CONFIGURA√á√ïES DA APLICA√á√ÉO
NODE_ENV="production"
PUBLIC_APP_URL="https://seu-dominio.com"

# SEGURAN√áA (GERE NOVAS CHAVES PARA PRODU√á√ÉO!)
JWT_SECRET="$(openssl rand -base64 32 2>/dev/null || echo 'sua_chave_jwt_super_secreta_aqui')"
ENCRYPT_KEY="$(openssl rand -base64 32 2>/dev/null || echo 'sua_chave_de_criptografia_32_chars')"
BCRYPT_SALT_ROUNDS="12"

# EMAIL (CONFIGURE SUAS CREDENCIAIS)
SMTP_HOST="smtp.gmail.com"
SMTP_PORT="587"
SMTP_SECURE="false"
SMTP_USER="seu_email@gmail.com"
SMTP_PASS="sua_senha_de_app_do_gmail"
FROM_EMAIL="noreply@graodigente.com.br"
FROM_NAME="Marketplace Gr√£o de Gente"

# INTEGRA√á√ïES (CONFIGURE SUAS CHAVES)
FRENET_TOKEN="seu_token_frenet_aqui"
STRIPE_PUBLIC_KEY="pk_live_sua_chave_publica_stripe"
STRIPE_SECRET_KEY="sk_live_sua_chave_secreta_stripe"
PAGSEGURO_EMAIL="seu_email_pagseguro"
PAGSEGURO_TOKEN="seu_token_pagseguro"

# CONFIGURA√á√ïES DE PRODU√á√ÉO
LOG_LEVEL="warn"
DEBUG_SQL="false"
MOCK_EXTERNAL_APIS="false"
EOF

log_success ".env atualizado com configura√ß√µes do Neon"

# Limpar arquivos tempor√°rios
rm -f "$NEON_BACKUP_FILE" /tmp/neon_import.log

# Relat√≥rio final
echo ""
echo "üéâ MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!"
echo ""
echo "üìä RESUMO DA MIGRA√á√ÉO:"
echo "  üóÑÔ∏è  Banco origem: Local PostgreSQL (46MB)"
echo "  üåê Banco destino: Neon PostgreSQL"
echo "  üìã Tabelas migradas: $NEON_TABLES"
echo "  üì¶ Backup criado: $BACKUP_FILE"
echo "  ‚è±Ô∏è  Conclu√≠do em: $(date)"
echo ""
echo "üîó CONFIGURA√á√ÉO NEON:"
echo "  Host: $NEON_HOST"
echo "  Banco: $NEON_DATABASE"
echo "  Usu√°rio: $NEON_USER"
echo ""
echo "üìù PR√ìXIMOS PASSOS:"
echo "  1. ‚úÖ Dados migrados com sucesso"
echo "  2. ‚úÖ Arquivo .env atualizado"
echo "  3. üîß Configure as integra√ß√µes externas no .env"
echo "  4. üöÄ Fa√ßa deploy do marketplace"
echo "  5. üß™ Teste todas as funcionalidades"
echo ""
echo "‚ö†Ô∏è  IMPORTANTE:"
echo "  ‚Ä¢ Backup local salvo em: $BACKUP_FILE"
echo "  ‚Ä¢ .env anterior salvo como .env.backup_*"
echo "  ‚Ä¢ Configure as chaves de API no .env"
echo "  ‚Ä¢ Teste tudo antes de usar em produ√ß√£o"
echo ""
echo "‚úÖ Seu marketplace est√° pronto para o Neon PostgreSQL!" 