import { json } from '@sveltejs/kit';
import type { RequestHandler } from './$types';
import OpenAI from 'openai';
import { OPENAI_API_KEY } from '$env/static/private';
import { getDatabase } from '$lib/db';

// Inicializar OpenAI com a chave do ambiente
const openai = new OpenAI({
	apiKey: OPENAI_API_KEY
});

export const POST: RequestHandler = async ({ request, platform }) => {
	try {
		// Verificar se a API key est√° configurada
		if (!OPENAI_API_KEY) {
			return json({
				success: false,
				error: 'Chave da API OpenAI n√£o configurada. Configure OPENAI_API_KEY no arquivo .env'
			}, { status: 500 });
		}
		
		// Testar conex√£o com a API (apenas em desenvolvimento)
		if (process.env.NODE_ENV === 'development') {
			try {
				console.log('Testando conex√£o com OpenAI...');
				const testResponse = await openai.models.list();
				console.log('Conex√£o com OpenAI OK');
			} catch (apiError: any) {
				console.error('Erro ao conectar com OpenAI:', apiError.message);
				return json({
					success: false,
					error: 'Erro ao conectar com OpenAI. Verifique sua API key.'
				}, { status: 500 });
			}
		}
		
		// Obter o signal do AbortController se enviado
		const signal = request.signal;
		
		// Verificar se a requisi√ß√£o j√° foi cancelada
		if (signal?.aborted) {
			return json({
				success: false,
				error: 'Requisi√ß√£o cancelada'
			}, { status: 499 }); // 499 = Client Closed Request
		}
		
		const requestData = await request.json();
		
		// Para requisi√ß√µes que v√™m do EnrichmentProgress, o formato √© diferente
		if (requestData.fetchCategories || requestData.fetchBrands) {
			// Enriquecimento completo
			return await enrichCompleteProduct(requestData, requestData.category, platform, signal);
		}
		
		// Para requisi√ß√µes de campo espec√≠fico
		const { field, prompt, currentData, category, action } = requestData;
		
		// Verificar se √© a√ß√£o de enriquecimento completo
		if (action === 'enrich_all') {
			return await enrichCompleteProduct(currentData, category, platform, signal);
		}
		
		// Enriquecimento de campo espec√≠fico
		return await enrichSpecificField(field, prompt, currentData, category, platform, signal);
		
	} catch (error) {
		console.error('Erro no enriquecimento IA:', error);
		return json({
			success: false,
			error: 'Erro ao processar solicita√ß√£o de IA'
		}, { status: 500 });
	}
};

async function enrichCompleteProduct(currentData: any, category?: string, platform?: any, signal?: AbortSignal) {
	console.log('üöÄ IA: Iniciando enriquecimento completo do produto:', currentData.name);
	console.log('üì¶ IA: Dados de entrada:', {
		name: currentData.name,
		description: currentData.description,
		category: category,
		price: currentData.price,
		brand: currentData.brand
	});
	
	try {
		// Verificar se foi cancelado
		if (signal?.aborted) {
			throw new Error('Requisi√ß√£o cancelada');
		}
		
		// Buscar categorias e marcas dispon√≠veis
		const db = getDatabase(platform);
		const [categories, brands] = await Promise.all([
			db.query`SELECT id, name, slug FROM categories WHERE is_active = true`,
			db.query`SELECT id, name, slug FROM brands WHERE is_active = true`
		]);
		await db.close();
		
		// Verificar novamente se foi cancelado
		if (signal?.aborted) {
			throw new Error('Requisi√ß√£o cancelada');
		}

		const prompt = `Voc√™ √© um especialista em e-commerce brasileiro especializado em produtos eletr√¥nicos, eletrodom√©sticos, produtos infantis e decora√ß√£o. Crie um produto COMPLETO e PROFISSIONAL baseado nos dados b√°sicos fornecidos.

DADOS ATUAIS:
- Nome: "${currentData.name || 'Produto sem nome'}"
- Pre√ßo: R$ ${currentData.price || 0}
- Custo: R$ ${currentData.cost || 0}
- Categoria atual: ${category || 'Nenhuma'}
- Marca atual: ${currentData.brand || 'Nenhuma'}
- Descri√ß√£o atual: "${currentData.description || 'Sem descri√ß√£o'}"

CATEGORIAS DISPON√çVEIS:
${categories.map((c: any) => `- ${c.name} (ID: ${c.id})`).join('\n')}

MARCAS DISPON√çVEIS:
${brands.map((b: any) => `- ${b.name} (ID: ${b.id})`).join('\n')}

INSTRU√á√ïES CR√çTICAS:
1. SEMPRE calcule um pre√ßo realista baseado no custo fornecido (margem de 40-60%)
2. SEMPRE preencha care_instructions com instru√ß√µes espec√≠ficas e detalhadas
3. SEMPRE preencha warranty_period com garantia apropriada para o tipo de produto
4. Para eletrodom√©sticos: inclua especifica√ß√µes t√©cnicas completas
5. Para produtos infantis: sempre definir age_group
6. Use linguagem natural brasileira sem clich√™s
7. Seja espec√≠fico e t√©cnico quando necess√°rio

RETORNE EM JSON EXATO com TODOS os campos preenchidos:

{
  "enhanced_name": "Nome otimizado para vendas (m√°x 80 chars)",
  "slug": "url-amigavel-do-produto",
  "sku": "SKU √∫nico profissional (formato espec√≠fico por categoria)",
  "description": "Descri√ß√£o completa 350-450 palavras com especifica√ß√µes t√©cnicas",
  "short_description": "Resumo atrativo 120-150 chars",
  "model": "Modelo espec√≠fico e t√©cnico do produto",
  "condition": "new",
  "price": "Pre√ßo de venda calculado com margem sobre o custo (OBRIGAT√ìRIO)",
  "cost": "Custo ajustado se necess√°rio",
  "weight": "Peso realista em kg com embalagem",
  "dimensions": {
    "height": "Altura em cm com embalagem",
    "width": "Largura em cm com embalagem", 
    "length": "Comprimento em cm com embalagem"
  },
  "barcode": "C√≥digo EAN-13 brasileiro (789XXXXXXXXXX)",
  "tags": ["tags", "espec√≠ficas", "e", "relevantes", "para", "busca"],
  "meta_title": "T√≠tulo SEO otimizado (m√°x 60 chars)",
  "meta_description": "Meta descri√ß√£o persuasiva (m√°x 160 chars)",
  "meta_keywords": ["keywords", "seo", "espec√≠ficas"],
  "category_suggestion": {
    "primary_category_id": "ID UUID da categoria mais espec√≠fica e apropriada",
    "primary_category_name": "Nome da categoria principal",
    "related_categories": [
      {
        "category_id": "ID UUID de categoria relacionada",
        "category_name": "Nome da categoria",
        "relevance": 0.9
      }
    ],
    "confidence": 0.95
  },
  "brand_suggestion": {
    "brand_id": "ID UUID se marca existe na lista ou null",
    "brand_name": "Nome exato da marca ou null",
    "confidence": 0.90
  },
  "suggested_variations": [
    {
      "type": "Voltagem",
      "options": ["110V", "220V", "Bivolt"]
    },
    {
      "type": "Cor",
      "options": ["Cores dispon√≠veis do produto"]
    }
  ],
  "suggested_attributes": [
    {
      "name": "Voltagem",
      "values": ["110V", "220V", "Bivolt"]
    },
    {
      "name": "Pot√™ncia",
      "values": ["Pot√™ncia em Watts"]
    },
    {
      "name": "Capacidade",
      "values": ["Capacidade em litros ou especifica√ß√£o"]
    }
  ],
  "suggested_specifications": {
    "Pot√™ncia": "Pot√™ncia em Watts",
    "Tens√£o": "Voltagem de funcionamento",
    "Capacidade": "Capacidade do produto",
    "Consumo": "Consumo energ√©tico",
    "Dimens√µes do produto": "Dimens√µes sem embalagem",
    "Material": "Material de fabrica√ß√£o",
    "Certifica√ß√µes": "Certifica√ß√µes brasileiras (INMETRO, etc)"
  },
  "delivery_days_min": 3,
  "delivery_days_max": 15,
  "has_free_shipping": false,
  "stock_location": "Centro de Distribui√ß√£o adequado",
  "ncm_code": "C√≥digo NCM brasileiro espec√≠fico do produto",
  "warranty_period": "Per√≠odo de garantia realista (12 meses, 24 meses, etc) - OBRIGAT√ìRIO",
  "care_instructions": "Instru√ß√µes detalhadas de instala√ß√£o, uso, limpeza e manuten√ß√£o - OBRIGAT√ìRIO",
  "age_group": "Faixa et√°ria se infantil ou null se adulto",
  "safety_certifications": "INMETRO e outras certifica√ß√µes brasileiras",
  "is_digital": false,
  "requires_shipping": true,
  "manufacturing_country": "C√≥digo ISO do pa√≠s de fabrica√ß√£o (2 letras: BR, US, CN, KR, etc)",
  "origin": "0"
}

REGRAS OBRIGAT√ìRIAS:
1. NUNCA deixe price como 0 - sempre calcule baseado no custo
2. SEMPRE preencha warranty_period com garantia realista
3. SEMPRE preencha care_instructions com instru√ß√µes espec√≠ficas
4. Para eletrodom√©sticos: inclua especifica√ß√µes t√©cnicas detalhadas
5. Para produtos eletr√¥nicos: inclua voltagem, pot√™ncia, consumo
6. Use category_suggestion com a categoria mais espec√≠fica poss√≠vel
7. Se marca n√£o existir na lista, retorne null mas mantenha o nome em brand_name`;

		const response = await openai.chat.completions.create({
			model: 'gpt-4o-mini',
			max_tokens: 2500,
			temperature: 0.7,
			messages: [{
				role: 'user',
				content: prompt
			}]
		}, {
			// Passar o signal para a OpenAI SDK cancelar a requisi√ß√£o
			signal: signal
		});

		const aiResponse = response.choices[0].message.content?.trim();
		if (!aiResponse) throw new Error('Resposta vazia da IA');

		console.log('ü§ñ IA: Resposta completa recebida:', aiResponse.substring(0, 200) + '...');

		// Limpar markdown e tentar parsear JSON
		const cleanedResponse = aiResponse.replace(/```json\n?|\n?```/g, '').trim();
		
		let enrichedData;
		try {
			enrichedData = JSON.parse(cleanedResponse);
			console.log('‚úÖ IA: JSON parseado com sucesso');
		} catch (parseError) {
			console.error('‚ùå IA: Erro ao fazer parse do JSON:', parseError);
			console.log('Resposta original:', cleanedResponse);
			throw new Error('Resposta da IA n√£o √© um JSON v√°lido');
		}

		// Validar e ajustar dados
		const validatedData = validateAndAdjustData(enrichedData, currentData);
		console.log('üéâ IA: Produto enriquecido completamente com sucesso!');

		return json({
			success: true,
			data: validatedData
		});

	} catch (error: any) {
		// Se foi cancelado, retornar status espec√≠fico
		if (error.message === 'Requisi√ß√£o cancelada' || error.name === 'AbortError' || signal?.aborted) {
			console.log('Enriquecimento cancelado pelo usu√°rio');
			return json({
				success: false,
				error: 'Enriquecimento cancelado',
				cancelled: true
			}, { status: 499 });
		}
		
		console.error('Erro no enriquecimento completo:', error);
		return json({
			success: false,
			error: 'Erro ao enriquecer produto completo'
		}, { status: 500 });
	}
}

async function enrichSpecificField(field: string, prompt: string, currentData: any, category?: string, platform?: any, signal?: AbortSignal) {
	try {
		// Verificar se foi cancelado
		if (signal?.aborted) {
			throw new Error('Requisi√ß√£o cancelada');
		}
		
		let specificPrompt = '';
		
		switch (field) {
			case 'category':
				console.log('ü§ñ IA: Analisando categorias para:', currentData.name);
				const db = getDatabase(platform);
				const categories = await db.query`SELECT id, name, slug FROM categories WHERE is_active = true`;
				await db.close();
				
				specificPrompt = `Analise este produto e sugira M√öLTIPLAS categorias apropriadas:
Nome: "${currentData.name}"
Descri√ß√£o: "${currentData.description || 'N/A'}"
Tags: ${currentData.tags?.join(', ') || 'N/A'}

CATEGORIAS DISPON√çVEIS:
${categories.map((c: any) => `- ${c.name} (ID: ${c.id})`).join('\n')}

IMPORTANTE:
1. Identifique a categoria PRINCIPAL mais apropriada
2. Sugira at√© 3 categorias RELACIONADAS onde o produto tamb√©m se encaixa
3. Ordene por relev√¢ncia (mais relevante primeiro)
4. Considere categorias pai e subcategorias quando apropriado

Retorne APENAS um JSON no formato:
{
  "primary_category_id": "id-da-categoria-principal",
  "primary_category_name": "Nome da Categoria Principal",
  "related_categories": [
    {
      "category_id": "id-categoria-relacionada-1",
      "category_name": "Nome Categoria Relacionada 1",
      "relevance": 0.9
    },
    {
      "category_id": "id-categoria-relacionada-2",
      "category_name": "Nome Categoria Relacionada 2",
      "relevance": 0.7
    }
  ],
  "confidence": 0.95
}`;
				console.log('ü§ñ IA: Prompt categorias preparado, enviando para OpenAI...');
				break;
				
			case 'brand':
				console.log('ü§ñ IA: Analisando marca para:', currentData.name);
				const db2 = getDatabase(platform);
				const brands = await db2.query`SELECT id, name, slug FROM brands WHERE is_active = true`;
				await db2.close();
				
				specificPrompt = `Identifique a marca deste produto:
Nome: "${currentData.name}"
Descri√ß√£o: "${currentData.description || 'N/A'}"
SKU: "${currentData.sku || 'N/A'}"

MARCAS DISPON√çVEIS:
${brands.map((b: any) => `- ${b.name} (ID: ${b.id})`).join('\n')}

Se n√£o identificar nenhuma marca conhecida, retorne null.
Retorne APENAS um JSON: {"brand_id": "id-ou-null", "brand_name": "nome-ou-null", "confidence": 0.90}`;
				console.log('ü§ñ IA: Prompt marca preparado, enviando para OpenAI...');
				break;
				
			case 'name':
				console.log('ü§ñ IA: Melhorando nome para:', currentData.name);
				specificPrompt = `Melhore este nome de produto para ser mais atrativo e vend√°vel: "${currentData.name}". 

Categoria: ${category}
Pre√ßo: R$ ${currentData.price || 0}

DIRETRIZES:
- Use linguagem natural brasileira
- Evite clich√™s como "ideal para", "perfeito para"
- Seja espec√≠fico sobre o produto
- M√°ximo 80 caracteres
- Foque no benef√≠cio principal

Retorne apenas o nome melhorado, sem explica√ß√µes.`;
				console.log('ü§ñ IA: Prompt nome preparado, enviando para OpenAI...');
				break;
				
			case 'model':
				console.log('ü§ñ IA: Identificando modelo para:', currentData.name);
				specificPrompt = `Identifique o modelo espec√≠fico deste produto: "${currentData.name}"

Categoria: ${category}
Descri√ß√£o: "${currentData.description || 'N/A'}"

DIRETRIZES:
- Extraia apenas o modelo/vers√£o espec√≠fica
- Remova marca e categoria do resultado
- Seja conciso e t√©cnico
- Se n√£o identificar modelo claro, sugira baseado no produto
- Para produtos sem modelo espec√≠fico, use caracter√≠sticas principais

Exemplos:
- "Smartphone Samsung Galaxy S24" ‚Üí "Galaxy S24"
- "Notebook Dell Inspiron 15 3000" ‚Üí "Inspiron 15 3000"
- "Cesto Organizador Listrado" ‚Üí "Listrado"
- "Mesa de Jantar 4 Lugares" ‚Üí "4 Lugares"

Retorne apenas o modelo identificado.`;
				console.log('ü§ñ IA: Prompt modelo preparado, enviando para OpenAI...');
				break;
				
			case 'description':
				console.log('ü§ñ IA: Gerando descri√ß√£o completa para:', currentData.name);
				specificPrompt = `Crie uma descri√ß√£o completa e persuasiva (300-400 palavras) para este produto:

Nome: "${currentData.name}"
Categoria: ${category}
Marca: ${currentData.brand}
Pre√ßo: R$ ${currentData.price}

ESTRUTURA:
1. Primeiro par√°grafo: Benef√≠cio principal (sem clich√™s)
2. Segundo par√°grafo: Caracter√≠sticas espec√≠ficas
3. Terceiro par√°grafo: Especifica√ß√µes t√©cnicas
4. Quarto par√°grafo: Call to action natural

DIRETRIZES:
- Use linguagem natural brasileira
- EVITE clich√™s como "destaca-se", "al√©m disso", "portanto", "ideal para"
- Seja espec√≠fico sobre materiais, dimens√µes, funcionalidades
- Para produtos infantis: enfatize seguran√ßa e desenvolvimento
- Para decora√ß√£o: foque em ambiente e praticidade
- Use par√°grafos curtos e objetivos

Retorne apenas a descri√ß√£o, sem explica√ß√µes.`;
				console.log('ü§ñ IA: Prompt descri√ß√£o preparado, enviando para OpenAI...');
				break;
				
			case 'meta_title':
				console.log('ü§ñ IA: Gerando meta title para:', currentData.name);
				specificPrompt = `Crie um t√≠tulo SEO otimizado para: "${currentData.name}"

DIRETRIZES:
- M√°ximo 60 caracteres
- Inclua palavra-chave principal
- Use linguagem natural brasileira
- Evite clich√™s
- Seja atrativo para cliques

Retorne apenas o t√≠tulo.`;
				console.log('ü§ñ IA: Prompt meta title preparado, enviando para OpenAI...');
				break;
				
			case 'meta_description':
				console.log('ü§ñ IA: Gerando meta description para:', currentData.name);
				specificPrompt = `Crie uma meta descri√ß√£o SEO para: "${currentData.name}"

Pre√ßo: R$ ${currentData.price || 0}
Categoria: ${category}

DIRETRIZES:
- Entre 145-160 caracteres
- Seja persuasivo
- Inclua call to action natural
- Use linguagem brasileira
- Mencione benef√≠cio principal

Retorne apenas a meta descri√ß√£o.`;
				console.log('ü§ñ IA: Prompt meta description preparado, enviando para OpenAI...');
				break;
				
			case 'tags':
				console.log('ü§ñ IA: Gerando tags para:', currentData.name);
				specificPrompt = `Liste 15-20 tags relevantes para este produto: "${currentData.name}"

Categoria: ${category}
Pre√ßo: R$ ${currentData.price || 0}

DIRETRIZES:
- Use termos que brasileiros pesquisam
- Inclua sin√¥nimos e varia√ß√µes
- Misture termos gerais e espec√≠ficos
- Inclua long-tail keywords
- Evite repeti√ß√µes

Retorne apenas array JSON: ["tag1", "tag2", ...]`;
				console.log('ü§ñ IA: Prompt tags preparado, enviando para OpenAI...');
				break;
				
			case 'sku':
				console.log('ü§ñ IA: Gerando SKU para:', currentData.name);
				specificPrompt = `Gere um SKU √∫nico e profissional para: "${currentData.name}"

Categoria: ${category}

FORMATO SUGERIDO: 
- 3 letras da categoria + h√≠fen + 3-4 letras do produto + h√≠fen + 3 n√∫meros
- Exemplo: DEC-ALM-001, INF-BRI-002

Retorne apenas o SKU.`;
				console.log('ü§ñ IA: Prompt SKU preparado, enviando para OpenAI...');
				break;
				
			case 'short_description':
				console.log('ü§ñ IA: Gerando descri√ß√£o curta para:', currentData.name);
				specificPrompt = `Crie uma descri√ß√£o curta (120-150 caracteres) atrativa para: "${currentData.name}"

DIRETRIZES:
- Foque no principal benef√≠cio
- Use linguagem natural brasileira
- Seja persuasivo mas n√£o exagerado
- Evite clich√™s

Retorne apenas a descri√ß√£o curta.`;
				console.log('ü§ñ IA: Prompt descri√ß√£o curta preparado, enviando para OpenAI...');
				break;
				
			case 'weight':
				specificPrompt = `Estime o peso em kg para este produto: "${currentData.name}"

Categoria: ${category}
Pre√ßo: R$ ${currentData.price || 0}

CONSIDERA√á√ïES:
- Inclua peso da embalagem
- Seja realista baseado no tipo de produto
- Para produtos infantis: considere materiais seguros
- Para decora√ß√£o: considere materiais t√≠picos

Retorne apenas o n√∫mero (ex: 0.5).`;
				break;
				
			case 'dimensions':
				specificPrompt = `Estime as dimens√µes (altura, largura, comprimento em cm) para: "${currentData.name}"

Categoria: ${category}
Pre√ßo: R$ ${currentData.price || 0}

CONSIDERA√á√ïES:
- Dimens√µes com embalagem para frete
- Seja realista baseado no produto
- Considere padr√µes brasileiros
- Para produtos infantis: considere ergonomia

Retorne JSON: {"height": 10, "width": 20, "length": 30}`;
				break;
				
			case 'barcode':
				specificPrompt = `Para o produto "${currentData.name}" na categoria ${category}, gere um c√≥digo de barras EAN-13 realista.

PADR√ÉO BRASILEIRO:
- Deve come√ßar com 789 (c√≥digo do Brasil)
- Deve ter exatamente 13 d√≠gitos
- Formato: 789XXXXXXXXXX

Se o produto parece ser importado, use:
- USA: 0-1 no in√≠cio
- Europa: 3-4 no in√≠cio  
- China: 69 no in√≠cio

Retorne APENAS o n√∫mero do c√≥digo de barras (13 d√≠gitos).`;
				break;
				
			case 'variations':
				specificPrompt = `Analise este produto e sugira varia√ß√µes apropriadas:

Nome: "${currentData.name}"
Descri√ß√£o: "${currentData.description || 'N/A'}"
Categoria: ${currentData.category || 'N/A'}
Pre√ßo: R$ ${currentData.price || 0}

IMPORTANTE:
- Sugira APENAS varia√ß√µes que fazem sentido para este produto espec√≠fico
- Seja realista e pr√°tico
- M√°ximo 3 tipos de varia√ß√£o
- Entre 2-8 op√ß√µes por varia√ß√£o

Exemplos por categoria:
- Produtos infantis: Cor, Tamanho, Personagem
- Decora√ß√£o: Cor, Material, Tamanho
- Eletr√¥nicos: Voltagem, Capacidade, Cor
- Roupas: Tamanho, Cor, Material

Retorne APENAS um JSON no formato:
[
  {
    "type": "Cor",
    "options": ["Preto", "Branco", "Azul"]
  },
  {
    "type": "Tamanho",
    "options": ["P", "M", "G", "GG"]
  }
]`;
				break;
				
			case 'attributes':
				specificPrompt = `Analise este produto e sugira especifica√ß√µes t√©cnicas/atributos apropriados:

Nome: "${currentData.name}"
Descri√ß√£o: "${currentData.description || 'N/A'}"
Categoria: ${currentData.category || 'N/A'}
Pre√ßo: R$ ${currentData.price || 0}

IMPORTANTE:
- Sugira APENAS atributos que fazem sentido para este produto
- Seja t√©cnico e espec√≠fico
- Use unidades de medida brasileiras
- Entre 5-15 atributos relevantes

Exemplos por categoria:
- Produtos infantis: Material, Idade recomendada, Certifica√ß√µes, Dimens√µes
- Decora√ß√£o: Material, Dimens√µes, Peso suportado, Estilo
- Eletr√¥nicos: Voltagem, Pot√™ncia, Conectividade, Garantia

Retorne APENAS um JSON no formato:
{
  "Material": "100% Algod√£o",
  "Idade Recomendada": "3+ anos",
  "Certifica√ß√µes": "INMETRO",
  "Dimens√µes": "30x20x15 cm"
}`;
				break;
				
			case 'specifications':
				specificPrompt = `Analise este produto e sugira especifica√ß√µes t√©cnicas detalhadas:

Nome: "${currentData.name}"
Descri√ß√£o: "${currentData.description || 'N/A'}"
Categoria: ${currentData.category || 'N/A'}
Pre√ßo: R$ ${currentData.price || 0}
Atributos existentes: ${JSON.stringify(currentData.attributes || {})}

IMPORTANTE:
- Sugira especifica√ß√µes t√©cnicas DETALHADAS e PRECISAS
- Seja espec√≠fico com unidades de medida brasileiras
- Inclua informa√ß√µes t√©cnicas relevantes
- Entre 8-20 especifica√ß√µes dependendo do produto

Exemplos por categoria:
- Eletr√¥nicos: Voltagem, Pot√™ncia, Consumo, Dimens√µes, Peso, Conectividade, Certifica√ß√µes
- Produtos infantis: Material, Dimens√µes, Peso, Idade recomendada, Certifica√ß√µes, Cuidados
- Decora√ß√£o: Material, Dimens√µes, Peso suportado, Capacidade, Acabamento
- Eletrodom√©sticos: Voltagem, Pot√™ncia, Capacidade, Consumo, Efici√™ncia energ√©tica

Retorne APENAS um JSON no formato:
{
  "Voltagem": "110V/220V Bivolt",
  "Pot√™ncia": "1200W",
  "Consumo": "1,2 kWh",
  "Dimens√µes": "45 x 35 x 25 cm",
  "Peso": "3,5 kg",
  "Certifica√ß√µes": "INMETRO, ANATEL",
  "Garantia": "12 meses"
}`;
				break;
				
			case 'care_instructions':
				specificPrompt = `Crie instru√ß√µes de cuidado espec√≠ficas para: "${currentData.name}"

Categoria: ${category}

DIRETRIZES:
- Seja espec√≠fico para o tipo de produto
- Use linguagem clara e objetiva
- Inclua cuidados de limpeza, manuten√ß√£o e armazenamento
- Para produtos infantis: enfatize seguran√ßa
- Para eletr√¥nicos: inclua cuidados t√©cnicos

Retorne apenas as instru√ß√µes, separadas por ponto.`;
				break;
				
			case 'age_group':
				specificPrompt = `Determine a faixa et√°ria apropriada para: "${currentData.name}"

Categoria: ${category}
Descri√ß√£o: "${currentData.description || 'N/A'}"

OP√á√ïES PADR√ÉO:
- "0-6 meses", "6-12 meses", "1-2 anos", "3-5 anos", "6-8 anos", "9-12 anos", "13+ anos"
- "Todas as idades" (se apropriado)

Considere:
- Seguran√ßa e desenvolvimento
- Complexidade do produto
- Tamanho e materiais

Retorne apenas a faixa et√°ria.`;
				break;
				
			default:
				throw new Error('Campo n√£o suportado para enriquecimento');
		}

		const response = await openai.chat.completions.create({
			model: 'gpt-4o-mini',
			max_tokens: 1000,
			temperature: 0.8,
			messages: [{
				role: 'user',
				content: specificPrompt
			}]
		}, {
			signal: signal
		});

		const aiResponse = response.choices[0].message.content?.trim();
		if (!aiResponse) throw new Error('Resposta vazia da IA');

		console.log(`ü§ñ IA: Resposta recebida para ${field}:`, aiResponse.substring(0, 100) + (aiResponse.length > 100 ? '...' : ''));

		// Limpar markdown se presente (igual ao enriquecimento completo)
		const cleanedResponse = aiResponse.replace(/```json\n?|\n?```/g, '').trim();

		// Processar resposta espec√≠fica por campo
		let processedData: any = cleanedResponse;
		
		if (field === 'tags') {
			try {
				processedData = JSON.parse(cleanedResponse);
				console.log(`‚úÖ IA: Tags processadas com sucesso:`, processedData.slice(0, 5), '...');
			} catch {
				// Se n√£o for JSON v√°lido, dividir por v√≠rgula
				processedData = cleanedResponse.split(',').map(tag => tag.trim().replace(/"/g, ''));
				console.log(`‚úÖ IA: Tags processadas (fallback):`, processedData.slice(0, 5), '...');
			}
		} else if (field === 'category' || field === 'brand' || field === 'dimensions' || field === 'variations' || field === 'attributes') {
			try {
				processedData = JSON.parse(cleanedResponse);
				console.log(`‚úÖ IA: Campo ${field} processado como JSON:`, processedData);
			} catch (error) {
				console.error(`‚ùå IA: Erro ao processar JSON para ${field}:`, error);
				throw new Error(`Resposta da IA inv√°lida para ${field}`);
			}
		} else {
			console.log(`‚úÖ IA: Campo ${field} processado como texto:`, processedData.substring(0, 50) + (processedData.length > 50 ? '...' : ''));
		}

		console.log(`üéâ IA: Campo ${field} enriquecido com sucesso!`);

		return json({
			success: true,
			data: processedData
		});

	} catch (error: any) {
		// Se foi cancelado, retornar status espec√≠fico
		if (error.message === 'Requisi√ß√£o cancelada' || error.name === 'AbortError' || signal?.aborted) {
			console.log(`Enriquecimento do campo ${field} cancelado pelo usu√°rio`);
			return json({
				success: false,
				error: 'Enriquecimento cancelado',
				cancelled: true
			}, { status: 499 });
		}
		
		console.error(`Erro no enriquecimento do campo ${field}:`, error);
		return json({
			success: false,
			error: `Erro ao enriquecer campo ${field}`
		}, { status: 500 });
	}
}

function validateAndAdjustData(enrichedData: any, currentData: any) {
	// Validar e ajustar dados baseado na estrutura real do banco
	const validated = {
		...enrichedData,
		// Garantir que price nunca seja 0
		price: parseFloat(enrichedData.price) || (currentData.cost ? currentData.cost * 1.5 : 100),
		// Garantir tipos corretos
		cost: parseFloat(enrichedData.cost) || parseFloat(currentData.cost) || (parseFloat(enrichedData.price) * 0.7),
		weight: parseFloat(enrichedData.weight) || 1.0,
		dimensions: {
			height: parseFloat(enrichedData.dimensions?.height) || 10,
			width: parseFloat(enrichedData.dimensions?.width) || 10,
			length: parseFloat(enrichedData.dimensions?.length) || 10
		},
		delivery_days_min: parseInt(enrichedData.delivery_days_min) || 3,
		delivery_days_max: parseInt(enrichedData.delivery_days_max) || 15,
		// Garantir booleans
		has_free_shipping: Boolean(enrichedData.has_free_shipping),
		featured: Boolean(enrichedData.featured),
		track_inventory: Boolean(enrichedData.track_inventory),
		allow_backorder: Boolean(enrichedData.allow_backorder),
		is_digital: Boolean(enrichedData.is_digital),
		requires_shipping: Boolean(enrichedData.requires_shipping),
		// Garantir arrays
		tags: Array.isArray(enrichedData.tags) ? enrichedData.tags : [],
		meta_keywords: Array.isArray(enrichedData.meta_keywords) ? enrichedData.meta_keywords : [],
		// Garantir objetos
		attributes: enrichedData.attributes || {},
		specifications: enrichedData.specifications || enrichedData.suggested_specifications || {},
		// Novos campos obrigat√≥rios
		warranty_period: enrichedData.warranty_period || '12 meses',
		care_instructions: enrichedData.care_instructions || 'Siga as instru√ß√µes do fabricante.',
		manufacturing_country: getCountryCode(enrichedData.manufacturing_country) || 'BR',
		safety_certifications: enrichedData.safety_certifications || 'INMETRO',
		ncm_code: enrichedData.ncm_code || null,
		origin: enrichedData.origin || '0'
	};

	// Processar atributos sugeridos
	if (enrichedData.suggested_attributes && Array.isArray(enrichedData.suggested_attributes)) {
		validated._suggested_attributes = enrichedData.suggested_attributes;
	}

	// Processar especifica√ß√µes sugeridas
	if (enrichedData.suggested_specifications) {
		validated.specifications = {
			...validated.specifications,
			...enrichedData.suggested_specifications
		};
	}

	// Processar varia√ß√µes sugeridas
	if (enrichedData.suggested_variations && Array.isArray(enrichedData.suggested_variations)) {
		validated._suggested_variations = enrichedData.suggested_variations;
	}

	// Gerar slug se n√£o fornecido
	if (!validated.slug && validated.enhanced_name) {
		validated.slug = validated.enhanced_name
			.toLowerCase()
			.normalize('NFD')
			.replace(/[\u0300-\u036f]/g, '')
			.replace(/[^a-z0-9]+/g, '-')
			.replace(/^-+|-+$/g, '');
	}

	// Gerar barcode realista se n√£o fornecido
	if (!validated.barcode) {
		validated.barcode = '789' + Math.floor(Math.random() * 1000000000000).toString().padStart(10, '0');
	}

	// Limitar tamanhos de string
	if (validated.meta_title && validated.meta_title.length > 60) {
		validated.meta_title = validated.meta_title.substring(0, 57) + '...';
	}
	
	if (validated.meta_description && validated.meta_description.length > 160) {
		validated.meta_description = validated.meta_description.substring(0, 157) + '...';
	}

	if (validated.short_description && validated.short_description.length > 150) {
		validated.short_description = validated.short_description.substring(0, 147) + '...';
	}

	// Garantir que enhanced_name seja usado como name
	if (validated.enhanced_name) {
		validated.name = validated.enhanced_name;
		delete validated.enhanced_name;
	}

	return validated;
}

function getCountryCode(country: string | undefined): string {
	if (!country) return 'BR';
	
	const countryCodes: Record<string, string> = {
		'Brasil': 'BR',
		'Estados Unidos': 'US',
		'China': 'CN',
		'Coreia do Sul': 'KR'
	};
	return countryCodes[country] || 'BR';
}