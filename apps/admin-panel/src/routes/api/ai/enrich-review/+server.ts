import { json } from '@sveltejs/kit';
import type { RequestHandler } from './$types';
import OpenAI from 'openai';
import { OPENAI_API_KEY } from '$env/static/private';
import { getDatabase } from '$lib/db';
import { getProcessedPrompt, getFallbackPrompt } from '$lib/services/aiPromptService';

// Inicializar OpenAI com a chave do ambiente
const openai = new OpenAI({
	apiKey: OPENAI_API_KEY
});

interface Suggestion {
	field: string;
	label: string;
	currentValue: any;
	suggestedValue: any;
	confidence: number;
	reasoning: string;
	source: 'ai' | 'similar_products' | 'category_template';
	category: 'basic' | 'pricing' | 'attributes' | 'variants' | 'media' | 'shipping' | 'seo' | 'inventory' | 'advanced';
	displayValue?: string;
	extra_info?: any;
}

// Fun√ß√£o para fallback expandido quando n√£o encontra prompt no banco
function getExpandedReviewFallback(currentData: any, categories: any[], brands: any[]): string {
	return `Voc√™ √© um especialista em e-commerce e marketing digital da Gr√£o de Gente. Analise o produto abaixo e sugira melhorias espec√≠ficas para TODOS os campos, mesmo que j√° estejam preenchidos.

PRODUTO ATUAL:
Nome: ${currentData.name}
Descri√ß√£o: ${currentData.description || 'N√£o informado'}
Descri√ß√£o Resumida: ${currentData.short_description || 'N√£o informado'}
SKU: ${currentData.sku || 'N√£o informado'}
Tags: ${Array.isArray(currentData.tags) ? currentData.tags.join(', ') : currentData.tags || 'N√£o informado'}
Pre√ßo: R$ ${currentData.price || currentData.sale_price || 'N√£o informado'}
Pre√ßo Original: R$ ${currentData.regular_price || currentData.original_price || 'N√£o informado'}
Custo: R$ ${currentData.cost || currentData.cost_price || 'N√£o informado'}
Meta T√≠tulo: ${currentData.meta_title || 'N√£o informado'}
Meta Descri√ß√£o: ${currentData.meta_description || 'N√£o informado'}
Meta Keywords: ${Array.isArray(currentData.meta_keywords) ? currentData.meta_keywords.join(', ') : currentData.meta_keywords || 'N√£o informado'}
Peso: ${currentData.weight || 'N√£o informado'}
Dimens√µes: ${currentData.height}x${currentData.width}x${currentData.length} cm
Estoque: ${currentData.quantity || 'N√£o informado'} unidades
Alerta Estoque Baixo: ${currentData.low_stock_alert || 'N√£o informado'}

CATEGORIAS DISPON√çVEIS:
${categories.map((c: any) => `- ${c.name} (ID: ${c.id})`).join('\n')}

MARCAS DISPON√çVEIS:
${brands.map((b: any) => `- ${b.name} (ID: ${b.id})`).join('\n')}

INSTRU√á√ïES IMPORTANTES:
1. Sugira melhorias para TODOS os campos listados abaixo - pelo menos 20 sugest√µes
2. Foque em SEO, convers√£o e experi√™ncia do cliente
3. Use a marca "Gr√£o de Gente" nas sugest√µes quando apropriado
4. Mantenha o tom brasileiro e profissional
5. Seja espec√≠fico e relevante para o produto analisado
6. Considere a categoria e p√∫blico-alvo do produto
7. Retorne APENAS um JSON v√°lido no formato especificado

FORMATO DE RESPOSTA (JSON OBRIGAT√ìRIO):
{
  "suggestions": [
    {
      "field": "name",
      "label": "Nome do Produto",
      "currentValue": "${currentData.name}",
      "suggestedValue": "SUGEST√ÉO MELHORADA ESPEC√çFICA",
      "confidence": 85,
      "reasoning": "Explica√ß√£o clara do motivo da melhoria",
      "source": "ai",
      "category": "basic"
    }
  ]
}

GERE SUGEST√ïES PARA ESTES CAMPOS (M√çNIMO 20):

ABA B√ÅSICO (category: "basic"):
- name: Nome do Produto  
- description: Descri√ß√£o Completa
- short_description: Descri√ß√£o Resumida
- sku: SKU/C√≥digo do Produto
- tags: Tags de Busca

ABA PRE√áOS (category: "pricing"):
- price/sale_price: Pre√ßo de Venda
- regular_price: Pre√ßo Original (De/Por)
- cost_price: Custo do Produto

ABA SEO (category: "seo"):
- meta_title: Meta T√≠tulo
- meta_description: Meta Descri√ß√£o
- meta_keywords: Palavras-chave SEO

ABA ATRIBUTOS (category: "attributes"):
- attributes: Atributos para Filtros
- specifications: Especifica√ß√µes T√©cnicas

ABA ESTOQUE (category: "inventory"):
- quantity: Quantidade em Estoque
- low_stock_alert: Alerta de Estoque Baixo

ABA FRETE (category: "shipping"):
- weight: Peso do Produto
- dimensions: Dimens√µes da Embalagem

ABA M√çDIA (category: "media"):
- images_suggestion: Sugest√µes de Fotos

ABA AVAN√áADO (category: "advanced"):
- origin: Pa√≠s de Origem
- care_instructions: Instru√ß√µes de Cuidado

RETORNE O JSON COM PELO MENOS 20 SUGEST√ïES ESPEC√çFICAS E INTELIGENTES!`;
}

// üöÄ NOVAS FUN√á√ïES ESPEC√çFICAS DE ALTA QUALIDADE

// üìù 1. ENRIQUECIMENTO DE CONTE√öDO B√ÅSICO
async function enrichBasicContent(currentData: any, openai: OpenAI): Promise<Suggestion[]> {
	try {
		const prompt = `Voc√™ √© um especialista em copywriting para e-commerce. Analise este produto e otimize APENAS os campos de conte√∫do b√°sico:

PRODUTO: ${currentData.name}
DESCRI√á√ÉO ATUAL: ${currentData.description || 'N√£o informado'}
DESCRI√á√ÉO CURTA: ${currentData.short_description || 'N√£o informado'}
SKU ATUAL: ${currentData.sku || 'N√£o informado'}
MODELO ATUAL: ${currentData.model || 'N√£o informado'}
TAGS ATUAIS: ${Array.isArray(currentData.tags) ? currentData.tags.join(', ') : currentData.tags || 'N√£o informado'}

INSTRU√á√ïES:
1. Otimize o NOME para SEO e convers√£o (inclua marca "Gr√£o de Gente" se apropriado)
2. Crie DESCRI√á√ÉO completa (300-500 palavras) focada em benef√≠cios
3. Crie DESCRI√á√ÉO CURTA comercial (at√© 120 caracteres)
4. Gere SKU profissional baseado na marca/categoria (ex: SAM-GAL-S24-128)
5. Extraia MODELO espec√≠fico do produto (ex: "Galaxy S24", "Air Max 90")
6. Sugira TAGS estrat√©gicas para busca

RETORNE APENAS JSON:
{
  "suggestions": [
    {
      "field": "name",
      "label": "Nome do Produto",
      "currentValue": "${currentData.name}",
      "suggestedValue": "NOME OTIMIZADO",
      "confidence": 90,
      "reasoning": "Motivo da otimiza√ß√£o",
      "source": "ai",
      "category": "basic"
    },

    {
      "field": "model",
      "label": "Modelo do Produto",
      "currentValue": "${currentData.model || ''}",
      "suggestedValue": "MODELO EXTRA√çDO",
      "confidence": 80,
      "reasoning": "Modelo espec√≠fico identificado no nome do produto",
      "source": "ai",
      "category": "basic"
    }
  ]
}`;

		const response = await openai.chat.completions.create({
			model: 'gpt-4-1106-preview',
			max_tokens: 2000,
			temperature: 0.7,
			messages: [{ role: 'user', content: prompt }]
		});

		const result = parseAIResponse(response.choices[0].message.content);
		console.log(`üìù Conte√∫do b√°sico: ${result.length} sugest√µes`);
		return result;
	} catch (error) {
		console.error('‚ùå Erro no conte√∫do b√°sico:', error);
		return [];
	}
}

// üîç 2. ENRIQUECIMENTO SEO + ROBOTS + STRUCTURED DATA
async function enrichSEOContent(currentData: any, openai: OpenAI): Promise<Suggestion[]> {
	try {
		const prompt = `Voc√™ √© um especialista em SEO para e-commerce. Otimize APENAS os campos SEO deste produto:

PRODUTO: ${currentData.name}
META T√çTULO: ${currentData.meta_title || 'N√£o informado'}
META DESCRI√á√ÉO: ${currentData.meta_description || 'N√£o informado'}
META KEYWORDS: ${Array.isArray(currentData.meta_keywords) ? currentData.meta_keywords.join(', ') : currentData.meta_keywords || 'N√£o informado'}
ROBOTS: ${currentData.robots_meta || 'N√£o informado'}

INSTRU√á√ïES:
1. Meta t√≠tulo (50-60 caracteres) com palavra-chave principal
2. Meta descri√ß√£o (150-160 caracteres) persuasiva
3. Meta keywords (8-12 palavras estrat√©gicas SEPARADAS POR V√çRGULAS como STRING)
4. Robots meta tags (index,follow ou noindex,nofollow)
5. Structured Data JSON-LD completo para o produto
6. Open Graph t√≠tulo e descri√ß√£o para redes sociais

RETORNE APENAS JSON:
{
  "suggestions": [
    {
      "field": "meta_title",
      "label": "Meta T√≠tulo",
      "currentValue": "${currentData.meta_title || ''}",
      "suggestedValue": "T√çTULO SEO OTIMIZADO",
      "confidence": 95,
      "reasoning": "Otimizado para SEO",
      "source": "ai",
      "category": "seo"
    },
    {
      "field": "robots_meta",
      "label": "Robots Meta",
      "currentValue": "${currentData.robots_meta || ''}",
      "suggestedValue": "index,follow",
      "confidence": 95,
      "reasoning": "Permitir indexa√ß√£o para produtos ativos",
      "source": "ai",
      "category": "seo"
    },
    {
      "field": "structured_data",
      "label": "Dados Estruturados",
      "currentValue": "${currentData.structured_data || ''}",
      "suggestedValue": "{\\"@context\\": \\"https://schema.org\\", \\"@type\\": \\"Product\\", \\"name\\": \\"${currentData.name}\\", \\"description\\": \\"Descri√ß√£o do produto\\", \\"brand\\": \\"Gr√£o de Gente\\"}",
      "confidence": 90,
      "reasoning": "JSON-LD Schema.org para rich snippets nos resultados de pesquisa",
      "source": "ai",
      "category": "seo"
    }
  ]
}`;

		const response = await openai.chat.completions.create({
			model: 'gpt-4-1106-preview',
			max_tokens: 2000,
			temperature: 0.3,
			messages: [{ role: 'user', content: prompt }]
		});

		const result = parseAIResponse(response.choices[0].message.content);
		console.log(`üîç SEO Avan√ßado: ${result.length} sugest√µes`);
		return result;
	} catch (error) {
		console.error('‚ùå Erro no SEO:', error);
		return [];
	}
}

// üìÇ 3. CATEGORIZA√á√ÉO INTELIGENTE (ir√° para aba BASIC)
async function suggestCategoriesIntelligent(currentData: any, categories: any[], brands: any[], openai: OpenAI): Promise<Suggestion[]> {
	try {
		const categoriesList = categories.slice(0, 50).map(c => `- ${c.name} (ID: ${c.id})`).join('\n');
		const brandsList = brands.slice(0, 20).map(b => `- ${b.name} (ID: ${b.id})`).join('\n');

		const prompt = `Voc√™ √© um especialista em categoriza√ß√£o de produtos e an√°lise de marcas. Analise este produto:

PRODUTO: ${currentData.name}
DESCRI√á√ÉO: ${currentData.description || 'N√£o informado'}

CATEGORIAS DISPON√çVEIS (primeiras 50):
${categoriesList}

MARCAS DISPON√çVEIS (primeiras 20):
${brandsList}

INSTRU√á√ïES PARA CATEGORIZA√á√ÉO:
1. Sugira 1-2 categorias mais adequadas (evite categorias muito espec√≠ficas como "beb√™" se n√£o for claramente infantil)
2. Para categoria, prefira categorias gerais sobre espec√≠ficas

INSTRU√á√ïES PARA MARCA:
1. ANALISE o nome do produto cuidadosamente
2. SE reconhecer uma marca espec√≠fica no nome (ex: "Nike", "Adidas", "Samsung"), sugira essa marca
3. SE n√£o reconhecer nenhuma marca espec√≠fica conhecida, N√ÉO sugira nada
4. N√ÉO force "Gr√£o de Gente" a menos que seja realmente da marca Gr√£o de Gente
5. Seja conservador - s√≥ sugira marca se tiver certeza

EXEMPLOS:
- "T√™nis Nike Air Max" ‚Üí Sugerir marca Nike
- "Cortina Petit Xadrez" ‚Üí N√ÉO sugerir marca (produto gen√©rico)
- "iPhone 13 Apple" ‚Üí Sugerir marca Apple
- "Almofada Decorativa" ‚Üí N√ÉO sugerir marca (produto gen√©rico)

RETORNE APENAS JSON:
{
  "suggestions": [
    {
      "field": "category_id",
      "label": "Categoria Principal",
      "currentValue": "",
      "suggestedValue": "ID_DA_CATEGORIA",
      "confidence": 90,
      "reasoning": "Motivo da categoria",
      "source": "ai",
      "category": "basic"
    }
    // S√ì inclua brand_id se realmente identificar uma marca espec√≠fica:
    // {
    //   "field": "brand_id", 
    //   "label": "Marca do Produto",
    //   "currentValue": "",
    //   "suggestedValue": "ID_DA_MARCA",
    //   "confidence": 85,
    //   "reasoning": "Marca identificada no nome do produto",
    //   "source": "ai",
    //   "category": "basic"
    // }
  ]
}`;

		const response = await openai.chat.completions.create({
			model: 'gpt-4-1106-preview',
			max_tokens: 1000,
			temperature: 0.7,
			messages: [{ role: 'user', content: prompt }]
		});

		const result = parseAIResponse(response.choices[0].message.content);
		
		// üîß ENRIQUECER AS SUGEST√ïES COM NOMES
		result.forEach((suggestion: any) => {
			if (suggestion.field === 'category_id' && suggestion.suggestedValue) {
				const category = categories.find(c => c.id === suggestion.suggestedValue);
				if (category) {
					suggestion.displayValue = `‚úÖ ${category.name}`;
					suggestion.extra_info = {
						category_name: category.name,
						category_id: category.id
					};
				}
			}
			
			if (suggestion.field === 'brand_id' && suggestion.suggestedValue) {
				const brand = brands.find(b => b.id === suggestion.suggestedValue);
				if (brand) {
					suggestion.displayValue = `‚úÖ ${brand.name}`;
					suggestion.extra_info = {
						brand_name: brand.name,
						brand_id: brand.id
					};
					console.log(`üè∑Ô∏è Marca identificada pela IA: ${brand.name}`);
				}
			}
		});
		
		console.log(`üìÇ Categoriza√ß√£o: ${result.length} sugest√µes`);
		return result;
	} catch (error) {
		console.error('‚ùå Erro na categoriza√ß√£o:', error);
		return [];
	}
}

// ‚öôÔ∏è 4. ATRIBUTOS E ESPECIFICA√á√ïES + CAMPOS PERSONALIZADOS
async function enrichAttributes(currentData: any, openai: OpenAI): Promise<Suggestion[]> {
	try {
		const prompt = `Voc√™ √© um especialista em estrutura√ß√£o de dados de produto. Crie atributos, especifica√ß√µes e campos personalizados:

PRODUTO: ${currentData.name}
DESCRI√á√ÉO: ${currentData.description || 'N√£o informado'}

INSTRU√á√ïES:
1. Atributos para FILTROS da loja (Cor, Tamanho, Material, etc.)
2. Especifica√ß√µes T√âCNICAS detalhadas
3. Campos PERSONALIZADOS relevantes para este tipo de produto
4. Baseie-se no tipo de produto

RETORNE APENAS JSON:
{
  "suggestions": [
    {
      "field": "attributes",
      "label": "Atributos para Filtros",
      "currentValue": {},
      "suggestedValue": {"Cor": ["Azul", "Rosa"], "Tamanho": ["√önico"]},
      "confidence": 85,
      "reasoning": "Atributos para filtros da loja",
      "source": "ai",
      "category": "attributes"
    },
    {
      "field": "specifications",
      "label": "Especifica√ß√µes T√©cnicas",
      "currentValue": {},
      "suggestedValue": {"Dimens√µes": "20x30x10 cm", "Material": "Algod√£o 100%", "Peso": "500g"},
      "confidence": 90,
      "reasoning": "Especifica√ß√µes t√©cnicas detalhadas para informar o consumidor",
      "source": "ai",
      "category": "attributes"
    },
    {
      "field": "custom_fields",
      "label": "Campos Personalizados",
      "currentValue": {},
      "suggestedValue": {"Voltagem": "110V/220V", "Idade Recomendada": "0-3 anos"},
      "confidence": 80,
      "reasoning": "Campos espec√≠ficos importantes para este tipo de produto",
      "source": "ai",
      "category": "attributes"
    }
  ]
}`;

		const response = await openai.chat.completions.create({
			model: 'gpt-4-1106-preview',
			max_tokens: 1500,
			temperature: 0.7,
			messages: [{ role: 'user', content: prompt }]
		});

		const result = parseAIResponse(response.choices[0].message.content);
		console.log(`‚öôÔ∏è Atributos + Campos: ${result.length} sugest√µes`);
		return result;
	} catch (error) {
		console.error('‚ùå Erro nos atributos:', error);
		return [];
	}
}

// üìè 5. DIMENS√ïES E AVAN√áADO
async function enrichDimensionsAndAdvanced(currentData: any, openai: OpenAI): Promise<Suggestion[]> {
	try {
		const prompt = `Voc√™ √© um especialista em log√≠stica e dados avan√ßados de produto. Estime dimens√µes e dados avan√ßados:

PRODUTO: ${currentData.name}
DESCRI√á√ÉO: ${currentData.description || 'N√£o informado'}

INSTRU√á√ïES:
1. Estime peso e dimens√µes baseado no tipo de produto
2. Sugira pa√≠s de origem prov√°vel
3. Sugira instru√ß√µes de cuidado
4. Sugira per√≠odo de garantia padr√£o
5. Sugira pa√≠s de fabrica√ß√£o
6. Sugira categoria fiscal geral (standard, food, books, etc.)

RETORNE APENAS JSON:
{
  "suggestions": [
    {
      "field": "weight",
      "label": "Peso Estimado",
      "currentValue": "",
      "suggestedValue": "0.5",
      "confidence": 70,
      "reasoning": "Peso estimado baseado no tipo de produto",
      "source": "ai",
      "category": "shipping"
    },
    {
      "field": "dimensions",
      "label": "Dimens√µes da Embalagem",
      "currentValue": "",
      "suggestedValue": "30x40x5",
      "confidence": 65,
      "reasoning": "Dimens√µes estimadas da embalagem (LxAxP em cm)",
      "source": "ai",
      "category": "shipping"
    },
    {
      "field": "length",
      "label": "Comprimento (cm)",
      "currentValue": "",
      "suggestedValue": "30",
      "confidence": 65,
      "reasoning": "Comprimento estimado da embalagem em cent√≠metros",
      "source": "ai",
      "category": "shipping"
    },
    {
      "field": "width",
      "label": "Largura (cm)", 
      "currentValue": "",
      "suggestedValue": "40",
      "confidence": 65,
      "reasoning": "Largura estimada da embalagem em cent√≠metros",
      "source": "ai",
      "category": "shipping"
    },
    {
      "field": "height",
      "label": "Altura (cm)",
      "currentValue": "",
      "suggestedValue": "5",
      "confidence": 65,
      "reasoning": "Altura estimada da embalagem em cent√≠metros",
      "source": "ai",
      "category": "shipping"
    }
  ]
}`;

		const response = await openai.chat.completions.create({
			model: 'gpt-4-1106-preview',
			max_tokens: 1500,
			temperature: 0.7,
			messages: [{ role: 'user', content: prompt }]
		});

		const result = parseAIResponse(response.choices[0].message.content);
		console.log(`üìè Dimens√µes/Avan√ßado: ${result.length} sugest√µes`);
		return result;
	} catch (error) {
		console.error('‚ùå Erro nas dimens√µes:', error);
		return [];
	}
}

// üí∞ 6. ENRIQUECIMENTO DE PRE√áOS
async function enrichPricing(currentData: any, openai: OpenAI): Promise<Suggestion[]> {
	try {
		const prompt = `Voc√™ √© um especialista em precifica√ß√£o e estrat√©gia comercial. Analise APENAS os pre√ßos deste produto:

PRODUTO: ${currentData.name}
PRE√áO ATUAL: R$ ${currentData.price || currentData.sale_price || 'N√£o informado'}
PRE√áO ORIGINAL: R$ ${currentData.original_price || currentData.regular_price || 'N√£o informado'}
CUSTO: R$ ${currentData.cost || currentData.cost_price || 'N√£o informado'}

INSTRU√á√ïES:
1. Sugira pre√ßo competitivo baseado no tipo de produto
2. Sugira pre√ßo "De/Por" se aplic√°vel
3. Sugira estimativa de custo se n√£o informado
4. Foque em rentabilidade e competitividade

RETORNE APENAS JSON:
{
  "suggestions": [
    {
      "field": "price",
      "label": "Pre√ßo de Venda",
      "currentValue": "${currentData.price || ''}",
      "suggestedValue": "49.90",
      "confidence": 75,
      "reasoning": "Pre√ßo competitivo para o tipo de produto",
      "source": "ai",
      "category": "pricing"
    }
  ]
}`;

		const response = await openai.chat.completions.create({
			model: 'gpt-4-1106-preview',
			max_tokens: 1500,
			temperature: 0.7,
			messages: [{ role: 'user', content: prompt }]
		});

		const result = parseAIResponse(response.choices[0].message.content);
		console.log(`üí∞ Pre√ßos: ${result.length} sugest√µes`);
		return result;
	} catch (error) {
		console.error('‚ùå Erro nos pre√ßos:', error);
		return [];
	}
}

// üì¶ 7. ENRIQUECIMENTO DE ESTOQUE
async function enrichInventory(currentData: any, openai: OpenAI): Promise<Suggestion[]> {
	try {
		const prompt = `Voc√™ √© um especialista em gest√£o de estoque. Analise APENAS os dados de estoque deste produto:

PRODUTO: ${currentData.name}
ESTOQUE ATUAL: ${currentData.quantity || 'N√£o informado'}
ALERTA BAIXO: ${currentData.low_stock_alert || 'N√£o informado'}

INSTRU√á√ïES:
1. Sugira quantidade inicial de estoque baseada no tipo de produto
2. Sugira n√≠vel de alerta de estoque baixo
3. Baseie-se no tipo e demanda esperada do produto

RETORNE APENAS JSON:
{
  "suggestions": [
    {
      "field": "quantity",
      "label": "Quantidade em Estoque",
      "currentValue": "${currentData.quantity || ''}",
      "suggestedValue": "50",
      "confidence": 70,
      "reasoning": "Quantidade inicial adequada para o tipo de produto",
      "source": "ai",
      "category": "inventory"
    }
  ]
}`;

		const response = await openai.chat.completions.create({
			model: 'gpt-4-1106-preview',
			max_tokens: 1000,
			temperature: 0.7,
			messages: [{ role: 'user', content: prompt }]
		});

		const result = parseAIResponse(response.choices[0].message.content);
		console.log(`üì¶ Estoque: ${result.length} sugest√µes`);
		return result;
	} catch (error) {
		console.error('‚ùå Erro no estoque:', error);
		return [];
	}
}

// üñºÔ∏è 8. M√çDIA N√ÉO UTILIZA IA - REMOVIDA INTENCIONALMENTE

// üé® 9. VARIA√á√ïES INTELIGENTES
async function suggestProductVariations(currentData: any, openai: OpenAI): Promise<Suggestion[]> {
	try {
		const prompt = `Voc√™ √© um especialista em estrutura√ß√£o de varia√ß√µes de produtos para e-commerce. Analise este produto e determine se deveria ter varia√ß√µes:

PRODUTO: ${currentData.name}
DESCRI√á√ÉO: ${currentData.description || 'N√£o informado'}

INSTRU√á√ïES:
1. Determine se o produto DEVERIA ter varia√ß√µes (has_variants: true/false)
2. Se SIM, sugira as OP√á√ïES (cor, tamanho, etc.)
3. Se SIM, sugira exemplos de VARIANTES espec√≠ficas
4. Seja realista baseado no tipo de produto

RETORNE APENAS JSON:
{
  "suggestions": [
    {
      "field": "has_variants",
      "label": "Produto com Varia√ß√µes",
      "currentValue": ${currentData.has_variants || false},
      "suggestedValue": true,
      "confidence": 85,
      "reasoning": "Este tipo de produto costuma ter varia√ß√µes",
      "source": "ai",
      "category": "variants"
    },
    {
      "field": "product_options",
      "label": "Op√ß√µes do Produto",
      "currentValue": {},
      "suggestedValue": {"Cor": ["Azul", "Rosa", "Branco"], "Tamanho": ["P", "M", "G"]},
      "confidence": 80,
      "reasoning": "Op√ß√µes t√≠picas para este tipo de produto",
      "source": "ai",
      "category": "variants"
    },
    {
      "field": "product_variants",
      "label": "Variantes do Produto",
      "currentValue": [],
      "suggestedValue": [{"sku": "PROD-AZ-P", "options": {"Cor": "Azul", "Tamanho": "P"}, "price": 49.90}],
      "confidence": 75,
      "reasoning": "Exemplo de variantes baseado nas op√ß√µes",
      "source": "ai",
      "category": "variants"
    }
  ]
}`;

		const response = await openai.chat.completions.create({
			model: 'gpt-4-1106-preview',
			max_tokens: 1500,
			temperature: 0.7,
			messages: [{ role: 'user', content: prompt }]
		});

		const result = parseAIResponse(response.choices[0].message.content);
		console.log(`üé® Varia√ß√µes: ${result.length} sugest√µes`);
		return result;
	} catch (error) {
		console.error('‚ùå Erro nas varia√ß√µes:', error);
		return [];
	}
}

// üîç 10. BUSCA DE PRODUTOS SIMILARES  
async function suggestVariationsFromSimilarProducts(currentData: any, platform: any): Promise<Suggestion[]> {
	try {
		if (!currentData.id) {
			console.log('‚ÑπÔ∏è Produto sem ID, pulando busca de varia√ß√µes');
			return [];
		}

		console.log('üîç Buscando produtos similares para varia√ß√µes...');
		
		// Usar sistema existente otimizado
		const db = getDatabase(platform);
		const similarProductsResult = await findSimilarProductsOptimized(currentData, db);
		await db.close();

		if (!similarProductsResult || similarProductsResult.length === 0) {
			console.log('‚ÑπÔ∏è Nenhum produto similar encontrado');
			return [];
		}

		// Se encontrou produtos similares, criar sugest√£o
		const suggestion: Suggestion = {
			field: 'similar_products_suggestion',
			label: 'Produtos Similares',
			currentValue: currentData.related_products || [],
			suggestedValue: similarProductsResult.slice(0, 5).map((p: any) => ({
				id: p.id,
				name: p.name,
				sku: p.sku,
				price: p.price,
				difference: 'Produto similar identificado'
			})),
			confidence: 80,
			reasoning: `Encontrados ${similarProductsResult.length} produtos similares que podem ser relacionados`,
			source: 'similar_products',
			category: 'variants'
		};

		console.log(`üé® Varia√ß√µes: 1 sugest√£o com ${similarProductsResult.length} produtos`);
		return [suggestion];
	} catch (error) {
		console.error('‚ùå Erro nas varia√ß√µes:', error);
		return [];
	}
}

// üîß FUN√á√ÉO AUXILIAR: Parse das respostas da IA
function parseAIResponse(content: string | null): Suggestion[] {
	if (!content) return [];
	
	try {
		// Limpar markdown
		let cleaned = content.replace(/```json\n?|\n?```/g, '').trim();
		
		// Remover caracteres de controle
		cleaned = cleaned
			.replace(/[\u0000-\u001F\u007F-\u009F]/g, '')
			.replace(/\r\n/g, '\n')
			.replace(/\r/g, '\n')
			.replace(/\t/g, ' ');
		
		// Encontrar JSON v√°lido
		const lastBraceIndex = cleaned.lastIndexOf('}');
		if (lastBraceIndex !== -1) {
			cleaned = cleaned.substring(0, lastBraceIndex + 1);
		}
		
		const parsed = JSON.parse(cleaned);
		const suggestions = parsed.suggestions || [];
		
		// üîß MAPEAR CATEGORIAS PARA AS ABAS CORRETAS
		return suggestions.map((suggestion: any) => {
			// Mapear categorias incorretas para as abas existentes
			let category = suggestion.category;
			
			// Mapeamentos de corre√ß√£o
			const categoryMap: Record<string, string> = {
				'cost_estimation': 'pricing',
				'technicalSpecifications': 'attributes',
				'manufacturing': 'advanced',
				'product_info': 'advanced', 
				'tax': 'advanced',
				'category': 'basic'
			};
			
			if (categoryMap[category]) {
				category = categoryMap[category];
			}
			
			// Garantir que s√≥ existem categorias v√°lidas
			const validCategories = ['basic', 'pricing', 'attributes', 'variants', 'media', 'shipping', 'seo', 'inventory', 'advanced'];
			if (!validCategories.includes(category)) {
				category = 'advanced'; // Default fallback
			}
			
			return {
				...suggestion,
				category
			};
		});
	} catch (error) {
		console.error('‚ùå Erro ao fazer parse:', error);
		return [];
	}
}

// üîç BUSCA OTIMIZADA DE PRODUTOS SIMILARES (crit√©rios rigorosos)
async function findSimilarProductsOptimized(currentProduct: any, db: any) {
	try {
		// Implementar busca rigorosa baseada nos crit√©rios definidos
		const query = `
			WITH base_product AS (
				SELECT name, brand_id, price, weight, height, width, length, 
					   (SELECT category_id FROM product_categories WHERE product_id = $1 AND is_primary = true LIMIT 1) as category_id
				FROM products WHERE id = $1::uuid
			),
			similar_candidates AS (
				SELECT p.id, p.name, p.sku, p.price, p.brand_id,
					-- Score rigoroso baseado nos crit√©rios definidos
					CASE 
						WHEN similarity(p.name, bp.name) > 0.7 THEN 40
						WHEN p.name ILIKE '%' || bp.name || '%' THEN 30
						ELSE 0
					END +
					CASE WHEN p.brand_id = bp.brand_id THEN 30 ELSE -50 END +
					CASE WHEN (SELECT category_id FROM product_categories WHERE product_id = p.id AND is_primary = true LIMIT 1) = bp.category_id THEN 20 ELSE -30 END +
					CASE 
						WHEN bp.price > 0 AND ABS(p.price - bp.price) / bp.price <= 0.10 THEN 15
						ELSE -20 
					END as total_score
				FROM products p
				CROSS JOIN base_product bp
				WHERE p.id != $1::uuid 
					AND p.is_active = true
					AND p.brand_id = bp.brand_id  -- Marca obrigat√≥ria igual
			)
			SELECT * FROM similar_candidates 
			WHERE total_score >= 50  -- Score m√≠nimo rigoroso
			ORDER BY total_score DESC
			LIMIT 10`;
		
		const result = await db.query(query, [currentProduct.id]);
		console.log(`üîç Busca otimizada encontrou ${result?.length || 0} produtos similares`);
		return result || [];
	} catch (error) {
		console.error('‚ùå Erro na busca otimizada:', error);
		return [];
	}
}

export const POST: RequestHandler = async ({ request, platform }) => {
	try {
		const { currentData } = await request.json();
		
		if (!currentData) {
			return Response.json({ 
				success: false, 
				error: 'Dados do produto n√£o fornecidos' 
			});
		}

		console.log('ü§ñ Iniciando an√°lise IA completa...');
		
		// Carregar dados necess√°rios
		const db = getDatabase(platform);
		const [categories, brands] = await Promise.all([
			db.query`SELECT id, name, slug FROM categories WHERE is_active = true`,
			db.query`SELECT id, name, slug FROM brands WHERE is_active = true`
		]);
		await db.close();
		
		// ‚úÖ EXECUTAR TODAS AS AN√ÅLISES EM PARALELO
		const [
			basicSuggestions,
			seoSuggestions,
			categorySuggestions,
			attributesSuggestions,
			dimensionsSuggestions,
			variationsSuggestions,
			similarProductsSuggestions
		] = await Promise.all([
			enrichBasicContent(currentData, openai),
			enrichSEOContent(currentData, openai),
			suggestCategoriesIntelligent(currentData, categories, brands, openai),
			enrichAttributes(currentData, openai),
			enrichDimensionsAndAdvanced(currentData, openai),
			suggestProductVariations(currentData, openai),
			suggestVariationsFromSimilarProducts(currentData, platform)
		]);

		// Combinar todas as sugest√µes
		const allSuggestions = [
			...basicSuggestions,
			...seoSuggestions,
			...categorySuggestions,
			...attributesSuggestions,
			...dimensionsSuggestions,
			...variationsSuggestions,
			...similarProductsSuggestions
		];

		// üîß ENRIQUECER AS SUGEST√ïES COM NOMES
		allSuggestions.forEach((suggestion: any) => {
			if (suggestion.field === 'category_id' && suggestion.suggestedValue) {
				const category = categories.find((c: any) => c.id === suggestion.suggestedValue);
				if (category) {
					suggestion.displayValue = `‚úÖ ${category.name}`;
					suggestion.extra_info = {
						category_name: category.name,
						category_id: category.id
					};
				}
			}
			
			if (suggestion.field === 'brand_id' && suggestion.suggestedValue) {
				const brand = brands.find((b: any) => b.id === suggestion.suggestedValue);
				if (brand) {
					suggestion.displayValue = `‚úÖ ${brand.name}`;
					suggestion.extra_info = {
						brand_name: brand.name,
						brand_id: brand.id
					};
					console.log(`üè∑Ô∏è Marca identificada pela IA: ${brand.name}`);
				}
			}
		});

		console.log(`‚úÖ An√°lise completa: ${allSuggestions.length} sugest√µes geradas`);

		return Response.json({
			success: true,
			suggestions: allSuggestions,
			metadata: {
				totalSuggestions: allSuggestions.length,
				categoriesByType: allSuggestions.reduce((acc: any, s: any) => {
					acc[s.category] = (acc[s.category] || 0) + 1;
					return acc;
				}, {}),
				processingTime: Date.now(),
				// üö´ REMOVIDAS as an√°lises de pre√ßo e estoque
				excludedAnalysis: ['pricing', 'inventory']
			}
		});

	} catch (error: any) {
		console.error('‚ùå Erro na an√°lise IA:', error);
		return Response.json({ 
			success: false, 
			error: error.message || 'Erro interno na an√°lise IA' 
		});
	}
}; 