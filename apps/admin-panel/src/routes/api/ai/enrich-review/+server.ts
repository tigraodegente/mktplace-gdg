import { json } from '@sveltejs/kit';
import type { RequestHandler } from './$types';
import OpenAI from 'openai';
import { OPENAI_API_KEY } from '$env/static/private';
import { getDatabase } from '$lib/db';
import { getProcessedPrompt, getFallbackPrompt } from '$lib/services/aiPromptService';
import { virtualFieldService } from '$lib/services/virtualFieldService';
import { aiApprovalService } from '$lib/services/aiApprovalService';

// Inicializar OpenAI com a chave do ambiente
const openai = new OpenAI({
	apiKey: OPENAI_API_KEY
});

// Classe de erro espec√≠fica para quando n√£o h√° saldo na IA
class AIQuotaExceededError extends Error {
	constructor(message: string) {
		super(message);
		this.name = 'AIQuotaExceededError';
	}
}

// Fun√ß√£o para verificar se √© erro de quota
function isQuotaExceededError(error: any): boolean {
	return error.status === 429 || 
		   error.code === 'insufficient_quota' || 
		   error.type === 'insufficient_quota' ||
		   (error.message && error.message.includes('quota')) ||
		   (error.message && error.message.includes('billing'));
}

interface Suggestion {
	field: string;
	label: string;
	currentValue: any;
	suggestedValue: any;
	confidence: number;
	reasoning: string;
	source: 'ai' | 'similar_products' | 'category_template';
	category: 'basic' | 'pricing' | 'attributes' | 'variants' | 'media' | 'shipping' | 'seo' | 'inventory' | 'advanced' | 'virtual';
	displayValue?: string;
	extra_info?: any;
}

// Fun√ß√£o para fallback expandido quando n√£o encontra prompt no banco
function getExpandedReviewFallback(currentData: any, categories: any[], brands: any[]): string {
	return `Voc√™ √© um especialista em e-commerce e marketing digital da Gr√£o de Gente. Analise o produto abaixo e sugira melhorias espec√≠ficas para TODOS os campos, mesmo que j√° estejam preenchidos.

PRODUTO ATUAL:
Nome: ${currentData.name}
Descri√ß√£o: ${currentData.description || 'N√£o informado'}
Descri√ß√£o Resumida: ${currentData.short_description || 'N√£o informado'}
SKU: ${currentData.sku || 'N√£o informado'}
Tags: ${Array.isArray(currentData.tags) ? currentData.tags.join(', ') : currentData.tags || 'N√£o informado'}
Pre√ßo: R$ ${currentData.price || currentData.sale_price || 'N√£o informado'}
Pre√ßo Original: R$ ${currentData.regular_price || currentData.original_price || 'N√£o informado'}
Custo: R$ ${currentData.cost || currentData.cost_price || 'N√£o informado'}
Meta T√≠tulo: ${currentData.meta_title || 'N√£o informado'}
Meta Descri√ß√£o: ${currentData.meta_description || 'N√£o informado'}
Meta Keywords: ${Array.isArray(currentData.meta_keywords) ? currentData.meta_keywords.join(', ') : currentData.meta_keywords || 'N√£o informado'}
Peso: ${currentData.weight || 'N√£o informado'}
Dimens√µes: ${currentData.height}x${currentData.width}x${currentData.length} cm
Estoque: ${currentData.quantity || 'N√£o informado'} unidades
Alerta Estoque Baixo: ${currentData.low_stock_alert || 'N√£o informado'}

CATEGORIAS DISPON√çVEIS:
${categories.map((c: any) => `- ${c.name} (ID: ${c.id})`).join('\n')}

MARCAS DISPON√çVEIS:
${brands.map((b: any) => `- ${b.name} (ID: ${b.id})`).join('\n')}

INSTRU√á√ïES IMPORTANTES:
1. Sugira melhorias para TODOS os campos listados abaixo - pelo menos 20 sugest√µes
2. Foque em SEO, convers√£o e experi√™ncia do cliente
3. Use a marca "Gr√£o de Gente" nas sugest√µes quando apropriado
4. Mantenha o tom brasileiro e profissional
5. Seja espec√≠fico e relevante para o produto analisado
6. Considere a categoria e p√∫blico-alvo do produto
7. Retorne APENAS um JSON v√°lido no formato especificado

FORMATO DE RESPOSTA (JSON OBRIGAT√ìRIO):
{
  "suggestions": [
    {
      "field": "name",
      "label": "Nome do Produto",
      "currentValue": "${currentData.name}",
      "suggestedValue": "SUGEST√ÉO MELHORADA ESPEC√çFICA",
      "confidence": 85,
      "reasoning": "Explica√ß√£o clara do motivo da melhoria",
      "source": "ai",
      "category": "basic"
    }
  ]
}

GERE SUGEST√ïES PARA ESTES CAMPOS (M√çNIMO 20):

ABA B√ÅSICO (category: "basic"):
- name: Nome do Produto  
- description: Descri√ß√£o Completa
- short_description: Descri√ß√£o Resumida
- sku: SKU/C√≥digo do Produto
- tags: Tags de Busca

ABA PRE√áOS (category: "pricing"):
- price/sale_price: Pre√ßo de Venda
- regular_price: Pre√ßo Original (De/Por)
- cost_price: Custo do Produto

ABA SEO (category: "seo"):
- meta_title: Meta T√≠tulo
- meta_description: Meta Descri√ß√£o
- meta_keywords: Palavras-chave SEO

ABA ATRIBUTOS (category: "attributes"):
- attributes: Atributos para Filtros
- specifications: Especifica√ß√µes T√©cnicas

ABA ESTOQUE (category: "inventory"):
- quantity: Quantidade em Estoque
- low_stock_alert: Alerta de Estoque Baixo

ABA FRETE (category: "shipping"):
- weight: Peso do Produto
- dimensions: Dimens√µes da Embalagem

ABA M√çDIA (category: "media"):
- images_suggestion: Sugest√µes de Fotos

ABA AVAN√áADO (category: "advanced"):
- origin: Pa√≠s de Origem
- care_instructions: Instru√ß√µes de Cuidado

RETORNE O JSON COM PELO MENOS 20 SUGEST√ïES ESPEC√çFICAS E INTELIGENTES!`;
}

// üöÄ NOVAS FUN√á√ïES ESPEC√çFICAS DE ALTA QUALIDADE

// üìù 1. ENRIQUECIMENTO DE CONTE√öDO B√ÅSICO
async function enrichBasicContent(currentData: any, openai: OpenAI): Promise<Suggestion[]> {
	try {
		const prompt = `Voc√™ √© um especialista em copywriting para e-commerce. Analise este produto e otimize APENAS os campos de conte√∫do b√°sico:

PRODUTO: ${currentData.name}
DESCRI√á√ÉO ATUAL: ${currentData.description || 'N√£o informado'}
DESCRI√á√ÉO CURTA: ${currentData.short_description || 'N√£o informado'}
SKU ATUAL: ${currentData.sku || 'N√£o informado'}
MODELO ATUAL: ${currentData.model || 'N√£o informado'}
TAGS ATUAIS: ${Array.isArray(currentData.tags) ? currentData.tags.join(', ') : currentData.tags || 'N√£o informado'}

INSTRU√á√ïES:
1. Otimize o NOME para SEO e convers√£o (inclua marca "Gr√£o de Gente" se apropriado)
2. Crie DESCRI√á√ÉO completa (300-500 palavras) focada em benef√≠cios
3. Crie DESCRI√á√ÉO CURTA comercial (at√© 120 caracteres)
4. Gere SKU profissional baseado na marca/categoria (ex: SAM-GAL-S24-128)
5. Extraia MODELO espec√≠fico do produto (ex: "Galaxy S24", "Air Max 90")
6. Sugira TAGS estrat√©gicas para busca

RETORNE APENAS JSON:
{
  "suggestions": [
    {
      "field": "name",
      "label": "Nome do Produto",
      "currentValue": "${currentData.name}",
      "suggestedValue": "NOME OTIMIZADO",
      "confidence": 90,
      "reasoning": "Motivo da otimiza√ß√£o",
      "source": "ai",
      "category": "basic"
    },

    {
      "field": "model",
      "label": "Modelo do Produto",
      "currentValue": "${currentData.model || ''}",
      "suggestedValue": "MODELO EXTRA√çDO",
      "confidence": 80,
      "reasoning": "Modelo espec√≠fico identificado no nome do produto",
      "source": "ai",
      "category": "basic"
    }
  ]
}`;

		const response = await openai.chat.completions.create({
			model: 'gpt-4-1106-preview',
			max_tokens: 2000,
			temperature: 0.7,
			messages: [{ role: 'user', content: prompt }]
		});

		const result = parseAIResponse(response.choices[0].message.content);
		console.log(`üìù Conte√∫do b√°sico: ${result.length} sugest√µes`);
		return result;
	} catch (error) {
		console.error('‚ùå Erro no conte√∫do b√°sico:', error);
		
		// Verificar se √© erro de quota/saldo
		if (isQuotaExceededError(error)) {
			throw new AIQuotaExceededError('N√£o h√° saldo suficiente na conta da IA para processar esta solicita√ß√£o. Verifique seu plano e dados de cobran√ßa.');
		}
		
		return [];
	}
}

// üîç 2. ENRIQUECIMENTO SEO + ROBOTS + STRUCTURED DATA
async function enrichSEOContent(currentData: any, openai: OpenAI): Promise<Suggestion[]> {
	try {
		const prompt = `Voc√™ √© um especialista em SEO para e-commerce. Otimize APENAS os campos SEO deste produto:

PRODUTO: ${currentData.name}
META T√çTULO: ${currentData.meta_title || 'N√£o informado'}
META DESCRI√á√ÉO: ${currentData.meta_description || 'N√£o informado'}
META KEYWORDS: ${Array.isArray(currentData.meta_keywords) ? currentData.meta_keywords.join(', ') : currentData.meta_keywords || 'N√£o informado'}
ROBOTS: ${currentData.robots_meta || 'N√£o informado'}

INSTRU√á√ïES:
1. Meta t√≠tulo (50-60 caracteres) com palavra-chave principal
2. Meta descri√ß√£o (150-160 caracteres) persuasiva
3. Meta keywords (8-12 palavras estrat√©gicas OBRIGAT√ìRIO COMO STRING separada por v√≠rgulas, N√ÉO array)
4. Robots meta tags (index,follow ou noindex,nofollow)
5. Structured Data JSON-LD completo para o produto
6. Open Graph t√≠tulo e descri√ß√£o para redes sociais

RETORNE APENAS JSON:
{
  "suggestions": [
    {
      "field": "meta_title",
      "label": "Meta T√≠tulo",
      "currentValue": "${currentData.meta_title || ''}",
      "suggestedValue": "T√çTULO SEO OTIMIZADO",
      "confidence": 95,
      "reasoning": "Otimizado para SEO",
      "source": "ai",
      "category": "seo"
    },
    {
      "field": "meta_description",
      "label": "Meta Descri√ß√£o",
      "currentValue": "${currentData.meta_description || ''}",
      "suggestedValue": "DESCRI√á√ÉO OTIMIZADA AQUI",
      "confidence": 95,
      "reasoning": "Descri√ß√£o meta otimizada para SEO",
      "source": "ai",
      "category": "seo"
    },
    {
      "field": "meta_keywords",
      "label": "Meta Keywords",
      "currentValue": "${currentData.meta_keywords || ''}",
      "suggestedValue": "palavra1, palavra2, palavra3, palavra4",
      "confidence": 85,
      "reasoning": "Keywords como STRING separada por v√≠rgulas",
      "source": "ai",
      "category": "seo"
    },
    {
      "field": "robots_meta",
      "label": "Robots Meta",
      "currentValue": "${currentData.robots_meta || ''}",
      "suggestedValue": "index,follow",
      "confidence": 95,
      "reasoning": "Permitir indexa√ß√£o para produtos ativos",
      "source": "ai",
      "category": "seo"
    },
    {
      "field": "structured_data",
      "label": "Dados Estruturados",
      "currentValue": "${currentData.structured_data || ''}",
      "suggestedValue": "{\\"@context\\": \\"https://schema.org\\", \\"@type\\": \\"Product\\", \\"name\\": \\"${currentData.name}\\", \\"description\\": \\"Descri√ß√£o do produto\\", \\"brand\\": \\"Gr√£o de Gente\\"}",
      "confidence": 90,
      "reasoning": "JSON-LD Schema.org para rich snippets nos resultados de pesquisa",
      "source": "ai",
      "category": "seo"
    },
    {
      "field": "og_title",
      "label": "Open Graph T√≠tulo",
      "currentValue": "${currentData.og_title || ''}",
      "suggestedValue": "T√çTULO PARA REDES SOCIAIS",
      "confidence": 85,
      "reasoning": "T√≠tulo otimizado para compartilhamento em redes sociais",
      "source": "ai",
      "category": "seo"
    },
    {
      "field": "og_description",
      "label": "Open Graph Descri√ß√£o",
      "currentValue": "${currentData.og_description || ''}",
      "suggestedValue": "DESCRI√á√ÉO PARA REDES SOCIAIS",
      "confidence": 85,
      "reasoning": "Descri√ß√£o otimizada para compartilhamento em redes sociais",
      "source": "ai",
      "category": "seo"
    }
  ]
}`;

		const response = await openai.chat.completions.create({
			model: 'gpt-4-1106-preview',
			max_tokens: 2000,
			temperature: 0.3,
			messages: [{ role: 'user', content: prompt }]
		});

		const result = parseAIResponse(response.choices[0].message.content);
		console.log(`üîç SEO Avan√ßado: ${result.length} sugest√µes`);
		return result;
	} catch (error) {
		console.error('‚ùå Erro no SEO:', error);
		
		// Verificar se √© erro de quota/saldo
		if (isQuotaExceededError(error)) {
			throw new AIQuotaExceededError('N√£o h√° saldo suficiente na conta da IA para processar esta solicita√ß√£o. Verifique seu plano e dados de cobran√ßa.');
		}
		
		return [];
	}
}

// üìÇ 3. CATEGORIZA√á√ÉO INTELIGENTE (ir√° para aba BASIC)
async function suggestCategoriesIntelligent(currentData: any, categories: any[], brands: any[], openai: OpenAI): Promise<Suggestion[]> {
	try {
		const categoriesList = categories.slice(0, 50).map(c => `- ${c.name} (ID: ${c.id})`).join('\n');
		const brandsList = brands.slice(0, 20).map(b => `- ${b.name} (ID: ${b.id})`).join('\n');

		const prompt = `Voc√™ √© um especialista em categoriza√ß√£o de produtos e an√°lise de marcas. Analise este produto:

PRODUTO: ${currentData.name}
DESCRI√á√ÉO: ${currentData.description || 'N√£o informado'}

CATEGORIAS DISPON√çVEIS (primeiras 50):
${categoriesList}

MARCAS DISPON√çVEIS (primeiras 20):
${brandsList}

INSTRU√á√ïES PARA CATEGORIZA√á√ÉO:
1. Sugira 1-2 categorias mais adequadas (evite categorias muito espec√≠ficas como "beb√™" se n√£o for claramente infantil)
2. Para categoria, prefira categorias gerais sobre espec√≠ficas

INSTRU√á√ïES PARA MARCA:
1. ANALISE o nome do produto cuidadosamente
2. SE reconhecer uma marca espec√≠fica no nome (ex: "Nike", "Adidas", "Samsung"), sugira essa marca
3. SE n√£o reconhecer nenhuma marca espec√≠fica conhecida, N√ÉO sugira nada
4. N√ÉO force "Gr√£o de Gente" a menos que seja realmente da marca Gr√£o de Gente
5. Seja conservador - s√≥ sugira marca se tiver certeza

EXEMPLOS:
- "T√™nis Nike Air Max" ‚Üí Sugerir marca Nike
- "Cortina Petit Xadrez" ‚Üí N√ÉO sugerir marca (produto gen√©rico)
- "iPhone 13 Apple" ‚Üí Sugerir marca Apple
- "Almofada Decorativa" ‚Üí N√ÉO sugerir marca (produto gen√©rico)

RETORNE APENAS JSON:
{
  "suggestions": [
    {
      "field": "category_id",
      "label": "Categoria Principal",
      "currentValue": "",
      "suggestedValue": "ID_DA_CATEGORIA",
      "confidence": 90,
      "reasoning": "Motivo da categoria",
      "source": "ai",
      "category": "basic"
    }
    // S√ì inclua brand_id se realmente identificar uma marca espec√≠fica:
    // {
    //   "field": "brand_id", 
    //   "label": "Marca do Produto",
    //   "currentValue": "",
    //   "suggestedValue": "ID_DA_MARCA",
    //   "confidence": 85,
    //   "reasoning": "Marca identificada no nome do produto",
    //   "source": "ai",
    //   "category": "basic"
    // }
  ]
}`;

		const response = await openai.chat.completions.create({
			model: 'gpt-4-1106-preview',
			max_tokens: 1000,
			temperature: 0.7,
			messages: [{ role: 'user', content: prompt }]
		});

		const result = parseAIResponse(response.choices[0].message.content);
		
		// üîß ENRIQUECER AS SUGEST√ïES COM NOMES
		result.forEach((suggestion: any) => {
			if (suggestion.field === 'category_id' && suggestion.suggestedValue) {
				const category = categories.find(c => c.id === suggestion.suggestedValue);
				if (category) {
					suggestion.displayValue = `‚úÖ ${category.name}`;
					suggestion.extra_info = {
						category_name: category.name,
						category_id: category.id
					};
				}
			}
			
			if (suggestion.field === 'brand_id' && suggestion.suggestedValue) {
				const brand = brands.find(b => b.id === suggestion.suggestedValue);
				if (brand) {
					suggestion.displayValue = `‚úÖ ${brand.name}`;
					suggestion.extra_info = {
						brand_name: brand.name,
						brand_id: brand.id
					};
					console.log(`üè∑Ô∏è Marca identificada pela IA: ${brand.name}`);
				}
			}
		});
		
		console.log(`üìÇ Categoriza√ß√£o: ${result.length} sugest√µes`);
		return result;
	} catch (error) {
		console.error('‚ùå Erro na categoriza√ß√£o:', error);
		
		// Verificar se √© erro de quota/saldo
		if (isQuotaExceededError(error)) {
			throw new AIQuotaExceededError('N√£o h√° saldo suficiente na conta da IA para processar esta solicita√ß√£o. Verifique seu plano e dados de cobran√ßa.');
		}
		
		return [];
	}
}

// ‚öôÔ∏è 4. ATRIBUTOS E ESPECIFICA√á√ïES + CAMPOS PERSONALIZADOS
async function enrichAttributes(currentData: any, openai: OpenAI): Promise<Suggestion[]> {
	try {
		const prompt = `Voc√™ √© um especialista em estrutura√ß√£o de dados de produto. Crie atributos, especifica√ß√µes e campos personalizados:

PRODUTO: ${currentData.name}
DESCRI√á√ÉO: ${currentData.description || 'N√£o informado'}

INSTRU√á√ïES:
1. Atributos para FILTROS da loja (Cor, Tamanho, Material, etc.)
2. Especifica√ß√µes T√âCNICAS detalhadas
3. Campos PERSONALIZADOS relevantes para este tipo de produto
4. Baseie-se no tipo de produto

RETORNE APENAS JSON:
{
  "suggestions": [
    {
      "field": "attributes",
      "label": "Atributos para Filtros",
      "currentValue": {},
      "suggestedValue": {"Cor": ["Azul", "Rosa"], "Tamanho": ["√önico"]},
      "confidence": 85,
      "reasoning": "Atributos para filtros da loja",
      "source": "ai",
      "category": "attributes"
    },
    {
      "field": "specifications",
      "label": "Especifica√ß√µes T√©cnicas",
      "currentValue": {},
      "suggestedValue": {"Dimens√µes": "20x30x10 cm", "Material": "Algod√£o 100%", "Peso": "500g"},
      "confidence": 90,
      "reasoning": "Especifica√ß√µes t√©cnicas detalhadas para informar o consumidor",
      "source": "ai",
      "category": "attributes"
    },
    {
      "field": "custom_fields",
      "label": "Campos Personalizados",
      "currentValue": {},
      "suggestedValue": {"Voltagem": "110V/220V", "Idade Recomendada": "0-3 anos"},
      "confidence": 80,
      "reasoning": "Campos espec√≠ficos importantes para este tipo de produto",
      "source": "ai",
      "category": "attributes"
    }
  ]
}`;

		const response = await openai.chat.completions.create({
			model: 'gpt-4-1106-preview',
			max_tokens: 1500,
			temperature: 0.7,
			messages: [{ role: 'user', content: prompt }]
		});

		const result = parseAIResponse(response.choices[0].message.content);
		console.log(`‚öôÔ∏è Atributos + Campos: ${result.length} sugest√µes`);
		return result;
	} catch (error) {
		console.error('‚ùå Erro nos atributos:', error);
		
		// Verificar se √© erro de quota/saldo
		if (isQuotaExceededError(error)) {
			throw new AIQuotaExceededError('N√£o h√° saldo suficiente na conta da IA para processar esta solicita√ß√£o. Verifique seu plano e dados de cobran√ßa.');
		}
		
		return [];
	}
}

// üìè 5. DIMENS√ïES E AVAN√áADO
async function enrichDimensionsAndAdvanced(currentData: any, openai: OpenAI): Promise<Suggestion[]> {
	try {
		const prompt = `Voc√™ √© um especialista em log√≠stica e dados avan√ßados de produto. Estime dimens√µes e dados avan√ßados:

PRODUTO: ${currentData.name}
DESCRI√á√ÉO: ${currentData.description || 'N√£o informado'}

INSTRU√á√ïES:
1. Estime peso e dimens√µes baseado no tipo de produto
2. Sugira pa√≠s de origem prov√°vel
3. Sugira instru√ß√µes de cuidado
4. Sugira per√≠odo de garantia padr√£o
5. Sugira pa√≠s de fabrica√ß√£o
6. Sugira categoria fiscal geral (standard, food, books, etc.)

RETORNE APENAS JSON:
{
  "suggestions": [
    {
      "field": "weight",
      "label": "Peso Estimado",
      "currentValue": "",
      "suggestedValue": "0.5",
      "confidence": 70,
      "reasoning": "Peso estimado baseado no tipo de produto",
      "source": "ai",
      "category": "shipping"
    },
    {
      "field": "dimensions",
      "label": "Dimens√µes da Embalagem",
      "currentValue": "",
      "suggestedValue": "30x40x5",
      "confidence": 65,
      "reasoning": "Dimens√µes estimadas da embalagem (LxAxP em cm)",
      "source": "ai",
      "category": "shipping"
    },
    {
      "field": "length",
      "label": "Comprimento (cm)",
      "currentValue": "",
      "suggestedValue": "30",
      "confidence": 65,
      "reasoning": "Comprimento estimado da embalagem em cent√≠metros",
      "source": "ai",
      "category": "shipping"
    },
    {
      "field": "width",
      "label": "Largura (cm)", 
      "currentValue": "",
      "suggestedValue": "40",
      "confidence": 65,
      "reasoning": "Largura estimada da embalagem em cent√≠metros",
      "source": "ai",
      "category": "shipping"
    },
    {
      "field": "height",
      "label": "Altura (cm)",
      "currentValue": "",
      "suggestedValue": "5",
      "confidence": 65,
      "reasoning": "Altura estimada da embalagem em cent√≠metros",
      "source": "ai",
      "category": "shipping"
    }
  ]
}`;

		const response = await openai.chat.completions.create({
			model: 'gpt-4-1106-preview',
			max_tokens: 1500,
			temperature: 0.7,
			messages: [{ role: 'user', content: prompt }]
		});

		const result = parseAIResponse(response.choices[0].message.content);
		console.log(`üìè Dimens√µes/Avan√ßado: ${result.length} sugest√µes`);
		return result;
	} catch (error) {
		console.error('‚ùå Erro nas dimens√µes:', error);
		
		// Verificar se √© erro de quota/saldo
		if (isQuotaExceededError(error)) {
			throw new AIQuotaExceededError('N√£o h√° saldo suficiente na conta da IA para processar esta solicita√ß√£o. Verifique seu plano e dados de cobran√ßa.');
		}
		
		return [];
	}
}

// üí∞ 6. ENRIQUECIMENTO DE PRE√áOS
async function enrichPricing(currentData: any, openai: OpenAI): Promise<Suggestion[]> {
	try {
		const prompt = `Voc√™ √© um especialista em precifica√ß√£o e estrat√©gia comercial. Analise APENAS os pre√ßos deste produto:

PRODUTO: ${currentData.name}
PRE√áO ATUAL: R$ ${currentData.price || currentData.sale_price || 'N√£o informado'}
PRE√áO ORIGINAL: R$ ${currentData.original_price || currentData.regular_price || 'N√£o informado'}
CUSTO: R$ ${currentData.cost || currentData.cost_price || 'N√£o informado'}

INSTRU√á√ïES:
1. Sugira pre√ßo competitivo baseado no tipo de produto
2. Sugira pre√ßo "De/Por" se aplic√°vel
3. Sugira estimativa de custo se n√£o informado
4. Foque em rentabilidade e competitividade

RETORNE APENAS JSON:
{
  "suggestions": [
    {
      "field": "price",
      "label": "Pre√ßo de Venda",
      "currentValue": "${currentData.price || ''}",
      "suggestedValue": "49.90",
      "confidence": 75,
      "reasoning": "Pre√ßo competitivo para o tipo de produto",
      "source": "ai",
      "category": "pricing"
    }
  ]
}`;

		const response = await openai.chat.completions.create({
			model: 'gpt-4-1106-preview',
			max_tokens: 1500,
			temperature: 0.7,
			messages: [{ role: 'user', content: prompt }]
		});

		const result = parseAIResponse(response.choices[0].message.content);
		console.log(`üí∞ Pre√ßos: ${result.length} sugest√µes`);
		return result;
	} catch (error) {
		console.error('‚ùå Erro nos pre√ßos:', error);
		
		// Verificar se √© erro de quota/saldo
		if (isQuotaExceededError(error)) {
			throw new AIQuotaExceededError('N√£o h√° saldo suficiente na conta da IA para processar esta solicita√ß√£o. Verifique seu plano e dados de cobran√ßa.');
		}
		
		return [];
	}
}

// üì¶ 7. ENRIQUECIMENTO DE ESTOQUE - REMOVIDO
// Campos de estoque (quantity, low_stock_alert) s√£o operacionais e n√£o devem ter IA
// Apenas stock_location mant√©m IA para sugerir localiza√ß√£o no galp√£o

// üñºÔ∏è 8. M√çDIA N√ÉO UTILIZA IA - REMOVIDA INTENCIONALMENTE

// üé® 9. VARIA√á√ïES INTELIGENTES
async function suggestProductVariations(currentData: any, openai: OpenAI): Promise<Suggestion[]> {
	try {
		const prompt = `Voc√™ √© um especialista em estrutura√ß√£o de varia√ß√µes de produtos para e-commerce. Analise este produto e determine se deveria ter varia√ß√µes:

PRODUTO: ${currentData.name}
DESCRI√á√ÉO: ${currentData.description || 'N√£o informado'}

INSTRU√á√ïES:
1. Determine se o produto DEVERIA ter varia√ß√µes (has_variants: true/false)
2. Se SIM, sugira as OP√á√ïES (cor, tamanho, etc.)
3. Se SIM, sugira exemplos de VARIANTES espec√≠ficas
4. Seja realista baseado no tipo de produto

RETORNE APENAS JSON:
{
  "suggestions": [
    {
      "field": "has_variants",
      "label": "Produto com Varia√ß√µes",
      "currentValue": ${currentData.has_variants || false},
      "suggestedValue": true,
      "confidence": 85,
      "reasoning": "Este tipo de produto costuma ter varia√ß√µes",
      "source": "ai",
      "category": "variants"
    },
    {
      "field": "product_options",
      "label": "Op√ß√µes do Produto",
      "currentValue": {},
      "suggestedValue": {"Cor": ["Azul", "Rosa", "Branco"], "Tamanho": ["P", "M", "G"]},
      "confidence": 80,
      "reasoning": "Op√ß√µes t√≠picas para este tipo de produto",
      "source": "ai",
      "category": "variants"
    },
    {
      "field": "product_variants",
      "label": "Variantes do Produto",
      "currentValue": [],
      "suggestedValue": [{"sku": "PROD-AZ-P", "options": {"Cor": "Azul", "Tamanho": "P"}, "price": 49.90}],
      "confidence": 75,
      "reasoning": "Exemplo de variantes baseado nas op√ß√µes",
      "source": "ai",
      "category": "variants"
    }
  ]
}`;

		const response = await openai.chat.completions.create({
			model: 'gpt-4-1106-preview',
			max_tokens: 1500,
			temperature: 0.7,
			messages: [{ role: 'user', content: prompt }]
		});

		const result = parseAIResponse(response.choices[0].message.content);
		console.log(`üé® Varia√ß√µes: ${result.length} sugest√µes`);
		return result;
	} catch (error) {
		console.error('‚ùå Erro nas varia√ß√µes:', error);
		
		// Verificar se √© erro de quota/saldo
		if (isQuotaExceededError(error)) {
			throw new AIQuotaExceededError('N√£o h√° saldo suficiente na conta da IA para processar esta solicita√ß√£o. Verifique seu plano e dados de cobran√ßa.');
		}
		
		return [];
	}
}

// üîç 10. BUSCA DE PRODUTOS SIMILARES  
async function suggestVariationsFromSimilarProducts(currentData: any, platform: any): Promise<Suggestion[]> {
	try {
		if (!currentData.id) {
			console.log('‚ÑπÔ∏è Produto sem ID, pulando busca de varia√ß√µes');
			return [];
		}

		console.log('üîç Buscando produtos similares para varia√ß√µes...');
		
		// Usar sistema existente otimizado
		const db = getDatabase(platform);
		const similarProductsResult = await findSimilarProductsOptimized(currentData, db);
		await db.close();

		if (!similarProductsResult || similarProductsResult.length === 0) {
			console.log('‚ÑπÔ∏è Nenhum produto similar encontrado');
			return [];
		}

		// Se encontrou produtos similares, criar sugest√£o
		const suggestion: Suggestion = {
			field: 'similar_products_suggestion',
			label: 'Produtos Similares',
			currentValue: currentData.related_products || [],
			suggestedValue: similarProductsResult.slice(0, 5).map((p: any) => ({
				id: p.id,
				name: p.name,
				sku: p.sku,
				price: p.price,
				difference: 'Produto similar identificado'
			})),
			confidence: 80,
			reasoning: `Encontrados ${similarProductsResult.length} produtos similares que podem ser relacionados`,
			source: 'similar_products',
			category: 'variants'
		};

		console.log(`üé® Varia√ß√µes: 1 sugest√£o com ${similarProductsResult.length} produtos`);
		return [suggestion];
	} catch (error) {
		console.error('‚ùå Erro nas varia√ß√µes:', error);
		return [];
	}
}

// üßÆ 8. ENRIQUECIMENTO DE CAMPOS VIRTUAIS
async function enrichVirtualFields(currentData: any, openai: OpenAI): Promise<Suggestion[]> {
	try {
		// Buscar campos virtuais habilitados para IA
		const virtualFields = await virtualFieldService.getVirtualFields({
			entity_type: 'products',
			ai_enabled: true,
			is_active: true
		});

		if (virtualFields.length === 0) {
			console.log('üìä Nenhum campo virtual com IA encontrado');
			return [];
		}

		console.log(`üìä Analisando ${virtualFields.length} campos virtuais com IA`);
		
		const suggestions: Suggestion[] = [];
		
		// Processar cada campo virtual
		for (const virtualField of virtualFields) {
			try {
				// Calcular valor atual do campo virtual
				const currentResult = await virtualFieldService.calculateVirtualField(
					virtualField.name,
					currentData
				);

				// Se n√£o conseguiu calcular ou prompt n√£o existe, pular
				if (!virtualField.ai_prompt || !virtualField.ai_prompt.trim()) {
					continue;
				}

				// Criar prompt espec√≠fico para este campo virtual
				const prompt = `${virtualField.ai_prompt}

PRODUTO ATUAL:
Nome: ${currentData.name}
Descri√ß√£o: ${currentData.description || 'N√£o informado'}
Pre√ßo: R$ ${currentData.price || 'N√£o informado'}
Custo: R$ ${currentData.cost || 'N√£o informado'}
Estoque: ${currentData.quantity || 'N√£o informado'}
Categoria: ${currentData.category_name || 'N√£o informado'}

DADOS PARA C√ÅLCULO:
${Object.entries(currentData).map(([key, value]) => `${key}: ${value}`).join('\n')}

VALOR ATUAL CALCULADO: ${currentResult.formatted_value || 'Erro no c√°lculo'}

INSTRU√á√ïES:
1. Analise o produto e os dados dispon√≠veis
2. Sugira um valor otimizado para o campo "${virtualField.display_name}"
3. Explique claramente o racioc√≠nio da sugest√£o
4. Considere as melhores pr√°ticas de e-commerce

RETORNE APENAS JSON:
{
  "field": "${virtualField.name}",
  "label": "${virtualField.display_name}",
  "currentValue": "${currentResult.value || ''}",
  "suggestedValue": "VALOR_SUGERIDO_AQUI",
  "confidence": 85,
  "reasoning": "Explica√ß√£o detalhada da sugest√£o",
  "source": "ai",
  "category": "virtual"
}`;

				const response = await openai.chat.completions.create({
					model: 'gpt-4-1106-preview',
					max_tokens: 500,
					temperature: 0.7,
					messages: [{ role: 'user', content: prompt }]
				});

				const content = response.choices[0].message.content;
				if (content) {
					try {
						const aiSuggestion = JSON.parse(content);
						
						// Validar e formatar a sugest√£o
						if (aiSuggestion.field && aiSuggestion.suggestedValue !== undefined) {
							suggestions.push({
								field: aiSuggestion.field,
								label: aiSuggestion.label || virtualField.display_name,
								currentValue: currentResult.formatted_value || currentResult.value,
								suggestedValue: aiSuggestion.suggestedValue,
								confidence: aiSuggestion.confidence || 75,
								reasoning: aiSuggestion.reasoning || 'Sugest√£o da IA para campo virtual',
								source: 'ai',
								category: 'virtual'
							});
						}
					} catch (parseError) {
						console.error(`‚ùå Erro ao parsear resposta IA para ${virtualField.name}:`, parseError);
					}
				}

			} catch (fieldError) {
				console.error(`‚ùå Erro ao processar campo virtual ${virtualField.name}:`, fieldError);
				
				// Verificar se √© erro de quota/saldo
				if (isQuotaExceededError(fieldError)) {
					throw new AIQuotaExceededError('N√£o h√° saldo suficiente na conta da IA para processar esta solicita√ß√£o. Verifique seu plano e dados de cobran√ßa.');
				}
			}
		}

		console.log(`üìä Campos virtuais: ${suggestions.length} sugest√µes geradas`);
		return suggestions;

	} catch (error) {
		console.error('‚ùå Erro geral nos campos virtuais:', error);
		
		// Verificar se √© erro de quota/saldo
		if (isQuotaExceededError(error)) {
			throw new AIQuotaExceededError('N√£o h√° saldo suficiente na conta da IA para processar esta solicita√ß√£o. Verifique seu plano e dados de cobran√ßa.');
		}
		
		return [];
	}
}

// üîß FUN√á√ÉO AUXILIAR: Parse das respostas da IA
function parseAIResponse(content: string | null): Suggestion[] {
	if (!content) {
		console.log('‚ö†Ô∏è Resposta vazia do ChatGPT');
		return [];
	}
	
	console.log('üìù Resposta bruta do ChatGPT:', content.substring(0, 500) + '...');
	
	try {
		// Limpar markdown e caracteres extras
		let cleaned = content
			.replace(/```json\n?|\n?```/g, '')
			.replace(/```\n?|\n?```/g, '')
			.trim();
		
		// Remover caracteres de controle
		cleaned = cleaned
			.replace(/[\u0000-\u001F\u007F-\u009F]/g, '')
			.replace(/\r\n/g, '\n')
			.replace(/\r/g, '\n')
			.replace(/\t/g, ' ');
		
		// Procurar por JSON v√°lido na resposta
		let jsonStart = cleaned.indexOf('{');
		let jsonEnd = cleaned.lastIndexOf('}');
		
		if (jsonStart === -1 || jsonEnd === -1) {
			console.log('‚ùå JSON n√£o encontrado na resposta');
			return [];
		}
		
		cleaned = cleaned.substring(jsonStart, jsonEnd + 1);
		console.log('üîß JSON limpo:', cleaned.substring(0, 300) + '...');
		
		const parsed = JSON.parse(cleaned);
		const suggestions = parsed.suggestions || [];
		
		console.log(`‚úÖ Parse realizado: ${suggestions.length} sugest√µes encontradas`);
		
		// üîß MAPEAR CATEGORIAS PARA AS ABAS CORRETAS
		const mappedSuggestions = suggestions.map((suggestion: any) => {
			// Mapear categorias incorretas para as abas existentes
			let category = suggestion.category;
			
			// Mapeamentos de corre√ß√£o
			const categoryMap: Record<string, string> = {
				'cost_estimation': 'pricing',
				'technicalSpecifications': 'attributes',
				'manufacturing': 'advanced',
				'product_info': 'advanced', 
				'tax': 'advanced',
				'category': 'basic',
				'advanced': 'advanced'
			};
			
			if (categoryMap[category]) {
				category = categoryMap[category];
			}
			
			// Garantir que s√≥ existem categorias v√°lidas
			const validCategories = ['basic', 'pricing', 'attributes', 'variants', 'media', 'shipping', 'seo', 'inventory', 'advanced'];
			if (!validCategories.includes(category)) {
				console.log(`‚ö†Ô∏è Categoria inv√°lida "${category}" - usando "advanced"`);
				category = 'advanced'; // Default fallback
			}
			
			return {
				...suggestion,
				category,
				source: 'ai'
			};
		});
		
		console.log('üìä Sugest√µes por categoria:', {
			basic: mappedSuggestions.filter((s: Suggestion) => s.category === 'basic').length,
			seo: mappedSuggestions.filter((s: Suggestion) => s.category === 'seo').length,
			pricing: mappedSuggestions.filter((s: Suggestion) => s.category === 'pricing').length,
			attributes: mappedSuggestions.filter((s: Suggestion) => s.category === 'attributes').length,
			shipping: mappedSuggestions.filter((s: Suggestion) => s.category === 'shipping').length,
			inventory: mappedSuggestions.filter((s: Suggestion) => s.category === 'inventory').length,
			advanced: mappedSuggestions.filter((s: Suggestion) => s.category === 'advanced').length
		});
		
		return mappedSuggestions;
	} catch (error) {
		console.error('‚ùå Erro ao fazer parse da resposta IA:', error);
		console.error('üìù Conte√∫do que causou erro:', content.substring(0, 1000));
		return [];
	}
}

// üîç BUSCA OTIMIZADA DE PRODUTOS SIMILARES (crit√©rios rigorosos)
async function findSimilarProductsOptimized(currentProduct: any, db: any) {
	try {
		// Implementar busca rigorosa baseada nos crit√©rios definidos
		const query = `
			WITH base_product AS (
				SELECT name, brand_id, price, weight, height, width, length, 
					   (SELECT category_id FROM product_categories WHERE product_id = $1 AND is_primary = true LIMIT 1) as category_id
				FROM products WHERE id = $1::uuid
			),
			similar_candidates AS (
				SELECT p.id, p.name, p.sku, p.price, p.brand_id,
					-- Score rigoroso baseado nos crit√©rios definidos
					CASE 
						WHEN similarity(p.name, bp.name) > 0.7 THEN 40
						WHEN p.name ILIKE '%' || bp.name || '%' THEN 30
						ELSE 0
					END +
					CASE WHEN p.brand_id = bp.brand_id THEN 30 ELSE -50 END +
					CASE WHEN (SELECT category_id FROM product_categories WHERE product_id = p.id AND is_primary = true LIMIT 1) = bp.category_id THEN 20 ELSE -30 END +
					CASE 
						WHEN bp.price > 0 AND ABS(p.price - bp.price) / bp.price <= 0.10 THEN 15
						ELSE -20 
					END as total_score
				FROM products p
				CROSS JOIN base_product bp
				WHERE p.id != $1::uuid 
					AND p.is_active = true
					AND p.brand_id = bp.brand_id  -- Marca obrigat√≥ria igual
			)
			SELECT * FROM similar_candidates 
			WHERE total_score >= 50  -- Score m√≠nimo rigoroso
			ORDER BY total_score DESC
			LIMIT 10`;
		
		const result = await db.query(query, [currentProduct.id]);
		console.log(`üîç Busca otimizada encontrou ${result?.length || 0} produtos similares`);
		return result || [];
	} catch (error) {
		console.error('‚ùå Erro na busca otimizada:', error);
		return [];
	}
}

export const POST: RequestHandler = async ({ request }) => {
	try {
		console.log('ü§ñ Iniciando an√°lise com IA...');
		const { currentData } = await request.json();
		
		// Buscar dados necess√°rios do banco
		const db = getDatabase();
		
		// Buscar categorias e marcas para enriquecimento
		const [categoriesResult, brandsResult] = await Promise.all([
			db.query('SELECT id, name, slug FROM categories WHERE is_active = true ORDER BY name LIMIT 100'),
			db.query('SELECT id, name, slug FROM brands WHERE is_active = true ORDER BY name LIMIT 50')
		]);
		
		const categories = categoriesResult || [];
		const brands = brandsResult || [];
		
		console.log(`üìä Dados carregados: ${categories.length} categorias, ${brands.length} marcas`);
		
		// FAZER CHAMADAS REAIS PARA O CHATGPT
		console.log('üîÑ Fazendo chamadas para ChatGPT...');
		
		const allSuggestions = await Promise.all([
			enrichBasicContent(currentData, openai),
			enrichSEOContent(currentData, openai),
			suggestCategoriesIntelligent(currentData, categories, brands, openai),
			enrichAttributes(currentData, openai),
			enrichDimensionsAndAdvanced(currentData, openai),
			enrichPricing(currentData, openai),
			suggestProductVariations(currentData, openai),
			suggestVariationsFromSimilarProducts(currentData, null),
			enrichVirtualFields(currentData, openai)
			// enrichInventory removido - campos de estoque n√£o devem ter IA
		]);

		// Combinar todas as sugest√µes
		const suggestions = allSuggestions.flat();
		
		console.log(`‚úÖ An√°lise IA conclu√≠da: ${suggestions.length} sugest√µes geradas`);
		console.log(`üìù Distribui√ß√£o por categoria:`, {
			basic: suggestions.filter((s: Suggestion) => s.category === 'basic').length,
			seo: suggestions.filter((s: Suggestion) => s.category === 'seo').length,
			pricing: suggestions.filter((s: Suggestion) => s.category === 'pricing').length,
			attributes: suggestions.filter((s: Suggestion) => s.category === 'attributes').length,
			shipping: suggestions.filter((s: Suggestion) => s.category === 'shipping').length,
			variants: suggestions.filter((s: Suggestion) => s.category === 'variants').length,
			inventory: suggestions.filter((s: Suggestion) => s.category === 'inventory').length,
			advanced: suggestions.filter((s: Suggestion) => s.category === 'advanced').length,
			virtual: suggestions.filter((s: Suggestion) => s.category === 'virtual').length
		});
		
		// üÜï CRIAR SESS√ÉO DE APROVA√á√ÉO
		console.log('üìã Criando sess√£o de aprova√ß√£o...');
		
		try {
			// Converter suggestions para formato de cria√ß√£o
			const suggestionData = suggestions.map(s => ({
				field_name: s.field,
				field_label: s.label,
				current_value: s.currentValue,
				suggested_value: s.suggestedValue,
				confidence: s.confidence,
				reasoning: s.reasoning,
				source: s.source,
				category: s.category,
				extra_info: s.extra_info || {}
			}));
			
			// TODO: Buscar userId do contexto de autentica√ß√£o
			const userId = 'current-user-id'; // Placeholder
			
			const session = await aiApprovalService.createSession({
				entity_type: 'products',
				entity_id: currentData.id || 'unknown',
				suggestions: suggestionData,
				analysis_data: {
					product_name: currentData.name,
					analysis_timestamp: new Date().toISOString(),
					total_suggestions: suggestions.length
				}
			}, userId);
			
			console.log(`‚úÖ Sess√£o de aprova√ß√£o criada: ${session.id}`);
			
			return json({
				success: true,
				suggestions,
				approval_session: {
					id: session.id,
					status: session.status,
					total_suggestions: session.total_suggestions,
					pending_suggestions: session.pending_suggestions,
					auto_approved: session.approved_suggestions
				}
			});
			
		} catch (approvalError) {
			console.error('‚ùå Erro ao criar sess√£o de aprova√ß√£o:', approvalError);
			
			// Retornar sugest√µes normalmente mesmo se aprova√ß√£o falhar
			return json({
				success: true,
				suggestions,
				approval_session: null,
				warning: 'Sugest√µes geradas mas sistema de aprova√ß√£o falhou'
			});
		}
		
	} catch (error) {
		console.error('‚ùå Erro na an√°lise IA:', error);
		
		// Verificar se √© erro de quota/saldo da IA
		if (error instanceof AIQuotaExceededError) {
			return json({
				success: false,
				error: 'Saldo insuficiente na IA',
				message: error.message,
				userMessage: 'üí≥ N√£o h√° saldo suficiente na conta da IA para processar esta solicita√ß√£o. Entre em contato com o administrador para verificar o plano e dados de cobran√ßa da OpenAI.'
			}, { status: 429 });
		}
		
		return json({
			success: false,
			error: 'Erro interno do servidor'
		}, { status: 500 });
	}
};

async function generateAISuggestions(data: any) {
	// Simular delay da IA
	await new Promise(resolve => setTimeout(resolve, 1000));
	
	const suggestions = [];
	
	// 1. SUGEST√ïES B√ÅSICAS (basic)
	if (data.name) {
		// Otimizar nome
		const optimizedName = `${data.name} - Premium Quality`;
		suggestions.push({
			field: 'name',
			label: 'Nome do Produto',
			currentValue: data.name,
			suggestedValue: optimizedName,
			confidence: 85,
			reasoning: 'Adicionado "Premium Quality" para melhorar percep√ß√£o de valor',
			category: 'basic'
		});
		
		// SKU profissional
		const sku = generateSKU(data.name);
		suggestions.push({
			field: 'sku',
			label: 'SKU do Produto',
			currentValue: data.sku || '',
			suggestedValue: sku,
			confidence: 80,
			reasoning: 'SKU gerado baseado no nome do produto para organiza√ß√£o do estoque',
			category: 'basic'
		});
		
		// Modelo espec√≠fico
		const model = extractModel(data.name);
		if (model) {
			suggestions.push({
				field: 'model',
				label: 'Modelo do Produto',
				currentValue: data.model || '',
				suggestedValue: model,
				confidence: 75,
				reasoning: 'Modelo espec√≠fico extra√≠do do nome do produto',
				category: 'basic'
			});
		}
	}
	
	// Sugest√µes de descri√ß√£o expandida
	if (data.description && data.description.length < 200) {
		const enhancedDescription = `${data.description}\n\n‚úÖ Produto de alta qualidade\n‚úÖ Entrega r√°pida e segura\n‚úÖ Garantia estendida\n‚úÖ Suporte t√©cnico especializado\n‚úÖ Satisfa√ß√£o garantida ou dinheiro de volta`;
		suggestions.push({
			field: 'description',
			label: 'Descri√ß√£o Completa',
			currentValue: data.description,
			suggestedValue: enhancedDescription,
			confidence: 85,
			reasoning: 'Descri√ß√£o expandida com benef√≠cios e caracter√≠sticas destacadas para aumentar convers√£o',
			category: 'basic'
		});
	}
	
	// Descri√ß√£o curta comercial
	if (!data.short_description || data.short_description.length < 50) {
		const shortDesc = generateShortDescription(data.name);
		suggestions.push({
			field: 'short_description',
			label: 'Descri√ß√£o Resumida',
			currentValue: data.short_description || '',
			suggestedValue: shortDesc,
			confidence: 80,
			reasoning: 'Descri√ß√£o resumida comercial para listagens de produtos',
			category: 'basic'
		});
	}
	
	// Tags para busca
	const suggestedTags = generateTags(data.name);
	suggestions.push({
		field: 'tags',
		label: 'Tags de Busca',
		currentValue: data.tags || '',
		suggestedValue: suggestedTags,
		confidence: 75,
		reasoning: 'Tags estrat√©gicas para melhorar encontrabilidade do produto',
		category: 'basic'
	});
	
	// 2. SUGEST√ïES SEO (seo)
	if (data.name) {
		// Meta title
		const metaTitle = `${data.name} | Compre Online com Frete Gr√°tis - Gr√£o de Gente`;
		suggestions.push({
			field: 'meta_title',
			label: 'T√≠tulo SEO',
			currentValue: data.meta_title || '',
			suggestedValue: metaTitle,
			confidence: 90,
			reasoning: 'T√≠tulo otimizado para SEO com palavras-chave relevantes e marca',
			category: 'seo'
		});
		
		// Meta description
		const metaDescription = `Compre ${data.name} com os melhores pre√ßos e frete gr√°tis. Qualidade garantida, entrega r√°pida e atendimento especializado. Aproveite!`;
		suggestions.push({
			field: 'meta_description',
			label: 'Descri√ß√£o SEO',
			currentValue: data.meta_description || '',
			suggestedValue: metaDescription,
			confidence: 88,
			reasoning: 'Descri√ß√£o otimizada para mecanismos de busca com call-to-action',
			category: 'seo'
		});
		
		// Meta keywords
		const keywords = generateMetaKeywords(data.name);
		suggestions.push({
			field: 'meta_keywords',
			label: 'Palavras-chave SEO',
			currentValue: data.meta_keywords || '',
			suggestedValue: keywords,
			confidence: 75,
			reasoning: 'Palavras-chave estrat√©gicas para SEO e busca org√¢nica',
			category: 'seo'
		});
		
		// Robots meta
		suggestions.push({
			field: 'robots_meta',
			label: 'Robots Meta',
			currentValue: data.robots_meta || '',
			suggestedValue: 'index,follow',
			confidence: 95,
			reasoning: 'Permitir indexa√ß√£o do produto pelos mecanismos de busca',
			category: 'seo'
		});
		
		// Open Graph title
		const ogTitle = `${data.name} - Gr√£o de Gente`;
		suggestions.push({
			field: 'og_title',
			label: 'Open Graph T√≠tulo',
			currentValue: data.og_title || '',
			suggestedValue: ogTitle,
			confidence: 85,
			reasoning: 'T√≠tulo otimizado para compartilhamento em redes sociais',
			category: 'seo'
		});
		
		// Open Graph description
		const ogDescription = `Descubra o ${data.name} na Gr√£o de Gente. Qualidade premium, pre√ßos justos e entrega garantida.`;
		suggestions.push({
			field: 'og_description',
			label: 'Open Graph Descri√ß√£o',
			currentValue: data.og_description || '',
			suggestedValue: ogDescription,
			confidence: 85,
			reasoning: 'Descri√ß√£o otimizada para compartilhamento em redes sociais',
			category: 'seo'
		});
	}
	
	// 3. SUGEST√ïES DE PRE√áOS (pricing)
	if (data.price && !data.sale_price) {
		const salePrice = Math.round(data.price * 0.9 * 100) / 100;
		suggestions.push({
			field: 'sale_price',
			label: 'Pre√ßo Promocional',
			currentValue: data.sale_price || null,
			suggestedValue: salePrice,
			confidence: 70,
			reasoning: 'Pre√ßo promocional de 10% de desconto para aumentar convers√µes',
			category: 'pricing'
		});
	}
	
	if (data.price && !data.cost_price) {
		const costPrice = Math.round(data.price * 0.6 * 100) / 100;
		suggestions.push({
			field: 'cost_price',
			label: 'Pre√ßo de Custo',
			currentValue: data.cost_price || null,
			suggestedValue: costPrice,
			confidence: 60,
			reasoning: 'Pre√ßo de custo estimado em 60% do pre√ßo de venda para controle de margem',
			category: 'pricing'
		});
	}
	
	// 4. SUGEST√ïES DE ATRIBUTOS (attributes)
	if (!data.attributes || Object.keys(data.attributes).length < 3) {
		const suggestedAttributes = generateAttributes(data.name);
		suggestions.push({
			field: 'attributes',
			label: 'Atributos para Filtros',
			currentValue: data.attributes || {},
			suggestedValue: { ...data.attributes, ...suggestedAttributes },
			confidence: 80,
			reasoning: 'Atributos essenciais para melhorar filtros da loja e informa√ß√µes do produto',
			category: 'attributes'
		});
	}
	
	// Especifica√ß√µes t√©cnicas
	const specifications = generateSpecifications(data.name);
	suggestions.push({
		field: 'specifications',
		label: 'Especifica√ß√µes T√©cnicas',
		currentValue: data.specifications || {},
		suggestedValue: specifications,
		confidence: 75,
		reasoning: 'Especifica√ß√µes t√©cnicas detalhadas para informar melhor o consumidor',
		category: 'attributes'
	});
	
	// 5. SUGEST√ïES DE ESTOQUE (inventory) - REMOVIDO: quantity e low_stock_alert n√£o devem ter IA
	// Campos de estoque s√£o operacionais e devem ser definidos pelo lojista
	
	// 6. SUGEST√ïES DE FRETE (shipping)
	if (!data.weight || data.weight === 0) {
		const estimatedWeight = estimateWeight(data.name);
		suggestions.push({
			field: 'weight',
			label: 'Peso do Produto',
			currentValue: data.weight || 0,
			suggestedValue: estimatedWeight,
			confidence: 60,
			reasoning: 'Peso estimado baseado no tipo de produto para c√°lculo de frete',
			category: 'shipping'
		});
	}
	
	if (!data.height || data.height === 0) {
		const dimensions = estimateDimensions(data.name);
		suggestions.push({
			field: 'height',
			label: 'Altura da Embalagem',
			currentValue: data.height || 0,
			suggestedValue: dimensions.height,
			confidence: 55,
			reasoning: 'Altura estimada da embalagem para c√°lculo de frete',
			category: 'shipping'
		});
		
		suggestions.push({
			field: 'width',
			label: 'Largura da Embalagem',
			currentValue: data.width || 0,
			suggestedValue: dimensions.width,
			confidence: 55,
			reasoning: 'Largura estimada da embalagem para c√°lculo de frete',
			category: 'shipping'
		});
		
		suggestions.push({
			field: 'length',
			label: 'Comprimento da Embalagem',
			currentValue: data.length || 0,
			suggestedValue: dimensions.length,
			confidence: 55,
			reasoning: 'Comprimento estimado da embalagem para c√°lculo de frete',
			category: 'shipping'
		});
	}
	
	// 7. SUGEST√ïES DE CATEGORIA (basic)
	if (!data.category_id && data.name) {
		const categoryGuess = guessCategory(data.name);
		if (categoryGuess) {
			suggestions.push({
				field: 'category_id',
				label: 'Categoria Principal',
				currentValue: data.category_id || null,
				suggestedValue: categoryGuess.id,
				confidence: 65,
				reasoning: `Categoria sugerida baseada no nome do produto: ${categoryGuess.name}`,
				category: 'basic'
			});
		}
	}
	
	return suggestions;
}

// Fun√ß√µes auxiliares para gera√ß√£o de sugest√µes
function generateSKU(productName: string): string {
	const cleanName = productName.replace(/[^a-zA-Z0-9]/g, '').toUpperCase();
	const prefix = cleanName.substring(0, 3);
	const suffix = Math.random().toString(36).substring(2, 8).toUpperCase();
	return `${prefix}-${suffix}`;
}

function extractModel(productName: string): string | null {
	const name = productName.toLowerCase();
	
	// Padr√µes comuns de modelos
	const patterns = [
		/(\w+\s+\w+\s+\w+)(?:\s|$)/,  // Tr√™s palavras
		/(\w+\s+\w+)(?:\s|$)/,        // Duas palavras
		/(galaxy\s+s\d+)/i,           // Galaxy S24, etc.
		/(iphone\s+\d+)/i,            // iPhone 13, etc.
		/(air\s+max\s+\d+)/i          // Air Max 90, etc.
	];
	
	for (const pattern of patterns) {
		const match = name.match(pattern);
		if (match) {
			return match[1].trim();
		}
	}
	
	return null;
}

function generateShortDescription(productName: string): string {
	return `${productName} com qualidade premium e entrega garantida. Aproveite!`;
}

function generateTags(productName: string): string {
	const name = productName.toLowerCase();
	const tags = [];
	
	// Tags baseadas no nome
	const words = name.split(' ').filter(word => word.length > 2);
	tags.push(...words.slice(0, 3));
	
	// Tags gen√©ricas
	tags.push('qualidade', 'premium', 'oferta', 'entrega r√°pida');
	
	return tags.join(', ');
}

function generateMetaKeywords(productName: string): string {
	const name = productName.toLowerCase();
	const keywords = [];
	
	// Palavras do produto
	const words = name.split(' ').filter(word => word.length > 2);
	keywords.push(...words.slice(0, 4));
	
	// Keywords SEO
	keywords.push('comprar', 'online', 'frete gr√°tis', 'promo√ß√£o', 'desconto', 'qualidade');
	
	return keywords.join(', ');
}

function generateAttributes(productName: string): any {
	const name = productName.toLowerCase();
	const attributes: any = {};
	
	// Atributos baseados no tipo de produto
	if (name.includes('notebook') || name.includes('computador')) {
		attributes['Tipo'] = 'Eletr√¥nico';
		attributes['Categoria'] = 'Inform√°tica';
		attributes['Garantia'] = '12 meses';
	} else if (name.includes('roupa') || name.includes('camisa')) {
		attributes['Tipo'] = 'Vestu√°rio';
		attributes['Material'] = 'Algod√£o';
		attributes['Tamanho'] = '√önico';
	} else {
		attributes['Material'] = 'Premium';
		attributes['Garantia'] = '12 meses';
		attributes['Origem'] = 'Nacional';
	}
	
	return attributes;
}

function generateSpecifications(productName: string): any {
	const name = productName.toLowerCase();
	const specs: any = {};
	
	// Especifica√ß√µes baseadas no tipo
	if (name.includes('notebook')) {
		specs['Processador'] = 'Intel Core i5';
		specs['Mem√≥ria RAM'] = '8GB';
		specs['Armazenamento'] = '256GB SSD';
		specs['Tela'] = '15.6 polegadas';
	} else {
		specs['Dimens√µes'] = '30 x 20 x 10 cm';
		specs['Peso'] = '500g';
		specs['Material'] = 'Material premium';
		specs['Cor'] = 'Variada';
	}
	
	return specs;
}

function estimateWeight(productName: string): number {
	const name = productName.toLowerCase();
	
	if (name.includes('notebook') || name.includes('laptop')) return 2.5;
	if (name.includes('livro')) return 0.3;
	if (name.includes('roupa') || name.includes('camisa')) return 0.2;
	if (name.includes('brinquedo')) return 0.8;
	
	return 0.5; // Peso padr√£o
}

function estimateDimensions(productName: string): { height: number, width: number, length: number } {
	const name = productName.toLowerCase();
	
	if (name.includes('notebook') || name.includes('laptop')) {
		return { height: 5, width: 35, length: 25 };
	}
	if (name.includes('livro')) {
		return { height: 2, width: 15, length: 20 };
	}
	if (name.includes('roupa')) {
		return { height: 3, width: 30, length: 20 };
	}
	
	return { height: 10, width: 20, length: 15 }; // Dimens√µes padr√£o
}

function guessCategory(productName: string) {
	const name = productName.toLowerCase();
	
	const categoryMapping = [
		{ keywords: ['notebook', 'laptop', 'computador'], id: 'electronics', name: 'Eletr√¥nicos' },
		{ keywords: ['camisa', 'camiseta', 'blusa', 'roupa'], id: 'clothing', name: 'Roupas' },
		{ keywords: ['livro', 'revista', 'literatura'], id: 'books', name: 'Livros' },
		{ keywords: ['jogo', 'brinquedo', 'toy'], id: 'toys', name: 'Brinquedos' },
		{ keywords: ['casa', 'decora√ß√£o', 'm√≥vel'], id: 'home', name: 'Casa e Decora√ß√£o' }
	];
	
	for (const category of categoryMapping) {
		if (category.keywords.some(keyword => name.includes(keyword))) {
			return category;
		}
	}
	
	return null;
} 