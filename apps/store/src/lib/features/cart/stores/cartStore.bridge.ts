/**
 * Cart Store Bridge - Teste A/B Seguro
 * 
 * Permite alternar entre implementaÃ§Ã£o antiga e nova
 * sem quebrar funcionalidades existentes
 */

import { cartStore as oldCartStore } from '../../../stores/cartStore';
import { newCartStore } from './cartStore.new';
import { refactoredCartStore } from './cartStore.refactored';

// ConfiguraÃ§Ã£o de teste com 3 opÃ§Ãµes
type StoreVersion = 'old' | 'new' | 'refactored';
const STORE_VERSION: StoreVersion = 'refactored'; // âœ… TESTANDO - VersÃ£o com services

// Bridge inteligente - suporta 3 implementaÃ§Ãµes
function getActiveStore() {
  switch (STORE_VERSION) {
    case 'old':
      return oldCartStore;
    case 'new':
      return newCartStore;
    case 'refactored':
      return refactoredCartStore;
    default:
      return newCartStore; // fallback seguro
  }
}

export const cartStoreBridge = getActiveStore();
export const advancedCartStoreBridge = cartStoreBridge;

// UtilitÃ¡rios para teste
if (typeof window !== 'undefined') {
  (window as any).__cartStoreVersion = STORE_VERSION;
  (window as any).__availableStoreVersions = ['old', 'new', 'refactored'];
  (window as any).__switchCartStore = (version: StoreVersion) => {
    console.log(`ðŸ”„ Para alternar para versÃ£o '${version}', altere STORE_VERSION e recompile`);
  };
}

// Para facilitar debug
console.log(`ðŸ›’ Cart Store ativo: ${STORE_VERSION.toUpperCase()}`); 