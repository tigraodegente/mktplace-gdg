import postgres from 'postgres';
import dotenv from 'dotenv';

dotenv.config();

const sql = postgres(process.env.DATABASE_URL);

async function verificarStatusEstoque() {
    console.log('üîç Verificando status e estoque dos produtos...\n');
    
    try {
        // 1. Total de produtos
        const totalProdutos = await sql`SELECT COUNT(*) as total FROM products`;
        console.log(`üì¶ TOTAL DE PRODUTOS: ${totalProdutos[0].total}`);
        
        // 2. Status dos produtos (ativo/inativo)
        const statusProdutos = await sql`
            SELECT 
                CASE 
                    WHEN is_active = true THEN 'Ativo' 
                    ELSE 'Inativo' 
                END as status,
                COUNT(*) as quantidade
            FROM products 
            GROUP BY is_active
            ORDER BY is_active DESC
        `;
        
        console.log('\nüìä STATUS DOS PRODUTOS:');
        statusProdutos.forEach(row => {
            console.log(`   ${row.status}: ${row.quantidade} produtos`);
        });
        
        // 3. An√°lise de estoque
        const estoqueAnalise = await sql`
            SELECT 
                CASE 
                    WHEN quantity > 0 THEN 'Com Estoque'
                    WHEN quantity = 0 THEN 'Sem Estoque'
                    WHEN quantity IS NULL THEN 'Estoque NULL'
                    ELSE 'Estoque Negativo'
                END as situacao_estoque,
                COUNT(*) as quantidade
            FROM products 
            GROUP BY 
                CASE 
                    WHEN quantity > 0 THEN 'Com Estoque'
                    WHEN quantity = 0 THEN 'Sem Estoque'
                    WHEN quantity IS NULL THEN 'Estoque NULL'
                    ELSE 'Estoque Negativo'
                END
            ORDER BY quantidade DESC
        `;
        
        console.log('\nüìà SITUA√á√ÉO DO ESTOQUE:');
        estoqueAnalise.forEach(row => {
            console.log(`   ${row.situacao_estoque}: ${row.quantidade} produtos`);
        });
        
        // 4. Produtos com varia√ß√µes
        const produtosComVariacoes = await sql`
            SELECT COUNT(DISTINCT product_id) as produtos_com_variacoes
            FROM product_variants
        `;
        
        console.log(`\nüîÑ PRODUTOS COM VARIA√á√ïES: ${produtosComVariacoes[0].produtos_com_variacoes}`);
        
        // 5. Total de varia√ß√µes
        const totalVariacoes = await sql`
            SELECT COUNT(*) as total_variacoes
            FROM product_variants
        `;
        
        console.log(`üîó TOTAL DE VARIA√á√ïES: ${totalVariacoes[0].total_variacoes}`);
        
        // 6. Status das varia√ß√µes
        const statusVariacoes = await sql`
            SELECT 
                CASE 
                    WHEN is_active = true THEN 'Ativo' 
                    ELSE 'Inativo' 
                END as status,
                COUNT(*) as quantidade
            FROM product_variants 
            GROUP BY is_active
            ORDER BY is_active DESC
        `;
        
        console.log('\nüìä STATUS DAS VARIA√á√ïES:');
        statusVariacoes.forEach(row => {
            console.log(`   ${row.status}: ${row.quantidade} varia√ß√µes`);
        });
        
        // 7. Estoque das varia√ß√µes
        const estoqueVariacoes = await sql`
            SELECT 
                CASE 
                    WHEN quantity > 0 THEN 'Com Estoque'
                    WHEN quantity = 0 THEN 'Sem Estoque'
                    WHEN quantity IS NULL THEN 'Estoque NULL'
                    ELSE 'Estoque Negativo'
                END as situacao_estoque,
                COUNT(*) as quantidade
            FROM product_variants
            GROUP BY 
                CASE 
                    WHEN quantity > 0 THEN 'Com Estoque'
                    WHEN quantity = 0 THEN 'Sem Estoque'
                    WHEN quantity IS NULL THEN 'Estoque NULL'
                    ELSE 'Estoque Negativo'
                END
            ORDER BY quantidade DESC
        `;
        
        console.log('\nüìà SITUA√á√ÉO DO ESTOQUE DAS VARIA√á√ïES:');
        estoqueVariacoes.forEach(row => {
            console.log(`   ${row.situacao_estoque}: ${row.quantidade} varia√ß√µes`);
        });
        
        // 8. Produtos sem varia√ß√µes
        const produtosSemVariacoes = await sql`
            SELECT COUNT(*) as produtos_sem_variacoes
            FROM products p
            WHERE NOT EXISTS (
                SELECT 1 FROM product_variants pv WHERE pv.product_id = p.id
            )
        `;
        
        console.log(`\nüì¶ PRODUTOS SEM VARIA√á√ïES: ${produtosSemVariacoes[0].produtos_sem_variacoes}`);
        
        // 9. Resumo combinado: produtos ativos com estoque
        const produtosAtivosComEstoque = await sql`
            SELECT COUNT(*) as total
            FROM products
            WHERE is_active = true AND quantity > 0
        `;
        
        console.log(`\n‚úÖ PRODUTOS ATIVOS COM ESTOQUE: ${produtosAtivosComEstoque[0].total}`);
        
        // 10. Resumo combinado: varia√ß√µes ativas com estoque
        const variacoesAtivasComEstoque = await sql`
            SELECT COUNT(*) as total
            FROM product_variants
            WHERE is_active = true AND quantity > 0
        `;
        
        console.log(`‚úÖ VARIA√á√ïES ATIVAS COM ESTOQUE: ${variacoesAtivasComEstoque[0].total}`);
        
        console.log('\nüéØ AN√ÅLISE CONCLU√çDA!');
        
    } catch (error) {
        console.error('‚ùå Erro:', error);
    } finally {
        await sql.end();
    }
}

verificarStatusEstoque(); 