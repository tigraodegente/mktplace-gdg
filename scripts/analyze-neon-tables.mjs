#!/usr/bin/env node

import { DatabaseConnector } from './sync/utils/db-connector.mjs'

async function analyzeNeonTables() {
  const connector = new DatabaseConnector({ forceConnection: true })
  
  try {
    console.log('üîç Analisando estrutura do banco Neon...\n')
    
    await connector.connectNeon()
    
    // Listar todas as tabelas
    console.log('üìä TABELAS EXISTENTES NO NEON:')
    const tablesResult = await connector.queryNeon(`
      SELECT table_name, 
             pg_size_pretty(pg_total_relation_size(table_schema||'.'||table_name)) as size
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `)
    
    console.log(`Total: ${tablesResult.rows.length} tabelas\n`)
    
    for (const table of tablesResult.rows) {
      const countResult = await connector.queryNeon(`SELECT COUNT(*) as count FROM ${table.table_name}`)
      const count = countResult.rows[0].count
      console.log(`  - ${table.table_name}: ${parseInt(count).toLocaleString('pt-BR')} registros (${table.size})`)
    }
    
    // Verificar estrutura das tabelas principais
    console.log('\n\nüìä AN√ÅLISE DETALHADA DAS TABELAS PRINCIPAIS:\n')
    
    // CATEGORIAS
    console.log('1Ô∏è‚É£ CATEGORIAS:')
    const categoriesResult = await connector.queryNeon('SELECT COUNT(*) as count FROM categories')
    console.log(`   Total: ${categoriesResult.rows[0].count}`)
    if (categoriesResult.rows[0].count > 0) {
      const sampleCategories = await connector.queryNeon('SELECT id, name, slug, parent_id FROM categories LIMIT 5')
      console.log('   Amostra:')
      sampleCategories.rows.forEach(cat => {
        console.log(`     - ${cat.name} (${cat.slug}) - Parent: ${cat.parent_id || 'ROOT'}`)
      })
    }
    
    // RELA√á√ÉO PRODUTO-CATEGORIA
    console.log('\n2Ô∏è‚É£ PRODUTO-CATEGORIA:')
    const prodCatResult = await connector.queryNeon('SELECT COUNT(*) as count FROM product_categories')
    console.log(`   Total de rela√ß√µes: ${prodCatResult.rows[0].count}`)
    
    // Produtos sem categoria
    const orphanProducts = await connector.queryNeon(`
      SELECT COUNT(DISTINCT p.id) as count
      FROM products p
      LEFT JOIN product_categories pc ON p.id = pc.product_id
      WHERE pc.product_id IS NULL
    `)
    console.log(`   ‚ö†Ô∏è  Produtos sem categoria: ${orphanProducts.rows[0].count}`)
    
    // IMAGENS
    console.log('\n3Ô∏è‚É£ IMAGENS DOS PRODUTOS:')
    const imagesResult = await connector.queryNeon('SELECT COUNT(*) as count FROM product_images')
    console.log(`   Total de imagens: ${imagesResult.rows[0].count}`)
    
    // Produtos com imagens
    const productsWithImages = await connector.queryNeon(`
      SELECT COUNT(DISTINCT product_id) as count FROM product_images
    `)
    console.log(`   Produtos com imagens: ${productsWithImages.rows[0].count}`)
    
    // USU√ÅRIOS
    console.log('\n4Ô∏è‚É£ USU√ÅRIOS:')
    const usersResult = await connector.queryNeon('SELECT COUNT(*) as count FROM users')
    console.log(`   Total: ${usersResult.rows[0].count}`)
    
    // Tipos de usu√°rios
    const userTypes = await connector.queryNeon(`
      SELECT role, COUNT(*) as count 
      FROM users 
      GROUP BY role
    `)
    if (userTypes.rows.length > 0) {
      console.log('   Por tipo:')
      userTypes.rows.forEach(type => {
        console.log(`     - ${type.role || 'customer'}: ${type.count}`)
      })
    }
    
    // PEDIDOS
    console.log('\n5Ô∏è‚É£ PEDIDOS:')
    const ordersResult = await connector.queryNeon('SELECT COUNT(*) as count FROM orders')
    console.log(`   Total: ${ordersResult.rows[0].count}`)
    
    if (ordersResult.rows[0].count > 0) {
      const orderStats = await connector.queryNeon(`
        SELECT 
          status,
          COUNT(*) as count,
          SUM(total) as total_value
        FROM orders
        GROUP BY status
      `)
      console.log('   Por status:')
      orderStats.rows.forEach(stat => {
        console.log(`     - ${stat.status}: ${stat.count} pedidos (R$ ${parseFloat(stat.total_value || 0).toLocaleString('pt-BR', {minimumFractionDigits: 2})})`)
      })
    }
    
    // M√âTODOS DE PAGAMENTO E ENTREGA
    console.log('\n6Ô∏è‚É£ CONFIGURA√á√ïES:')
    const shippingResult = await connector.queryNeon('SELECT COUNT(*) as count FROM shipping_methods')
    console.log(`   M√©todos de entrega: ${shippingResult.rows[0].count}`)
    
    const paymentResult = await connector.queryNeon('SELECT COUNT(*) as count FROM payment_methods')
    console.log(`   M√©todos de pagamento: ${paymentResult.rows[0].count}`)
    
    // AN√ÅLISE DE PROBLEMAS
    console.log('\n\nüö® PROBLEMAS IDENTIFICADOS:\n')
    
    const problems = []
    
    if (categoriesResult.rows[0].count === 0) {
      problems.push('‚ùå Sem categorias - navega√ß√£o n√£o funcionar√°')
    }
    
    if (orphanProducts.rows[0].count > 0) {
      problems.push(`‚ö†Ô∏è  ${orphanProducts.rows[0].count} produtos sem categoria`)
    }
    
    if (imagesResult.rows[0].count === 0) {
      problems.push('‚ùå Sem imagens na tabela product_images')
    }
    
    if (usersResult.rows[0].count === 0) {
      problems.push('‚ùå Sem usu√°rios - login/cadastro n√£o funcionar√°')
    }
    
    if (shippingResult.rows[0].count === 0) {
      problems.push('‚ùå Sem m√©todos de entrega configurados')
    }
    
    if (paymentResult.rows[0].count === 0) {
      problems.push('‚ùå Sem m√©todos de pagamento configurados')
    }
    
    if (problems.length > 0) {
      problems.forEach(p => console.log(p))
    } else {
      console.log('‚úÖ Estrutura b√°sica est√° completa!')
    }
    
    // RECOMENDA√á√ïES
    console.log('\n\nüí° DADOS NECESS√ÅRIOS PARA O FRONTEND:\n')
    console.log('1. CATEGORIAS (MongoDB: c_category?)')
    console.log('   - Necess√°rio para menu de navega√ß√£o')
    console.log('   - Necess√°rio para filtros de produtos')
    console.log('   - Relacionar produtos com categorias')
    
    console.log('\n2. USU√ÅRIOS (MongoDB: c_customer_address tem 514.836 docs)')
    console.log('   - Necess√°rio para login/cadastro')
    console.log('   - Hist√≥rico de pedidos')
    console.log('   - Endere√ßos de entrega')
    
    console.log('\n3. CONFIGURA√á√ïES DE CHECKOUT')
    console.log('   - M√©todos de pagamento')
    console.log('   - M√©todos de entrega')
    console.log('   - C√°lculo de frete')
    
    console.log('\n4. PEDIDOS (MongoDB: c_salesorder tem 391.523 docs)')
    console.log('   - Hist√≥rico de compras')
    console.log('   - Status de pedidos')
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message)
    console.error(error)
  } finally {
    await connector.disconnect()
  }
}

analyzeNeonTables() 