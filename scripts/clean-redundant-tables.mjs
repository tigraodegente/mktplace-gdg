#!/usr/bin/env node

import { DatabaseConnector } from './sync/utils/db-connector.mjs'
import dotenv from 'dotenv'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

// Carregar configura√ß√µes
dotenv.config({ path: path.resolve(__dirname, '../.env.develop') })
dotenv.config()

async function cleanRedundantTables() {
  const connector = new DatabaseConnector({ forceConnection: true })
  
  try {
    console.log('üßπ LIMPEZA SEGURA DE TABELAS REDUNDANTES')
    console.log('=======================================\n')
    
    await connector.connectNeon()
    
    // ETAPA 1: REMOVER TABELAS TEMPOR√ÅRIAS/CACHE (100% SEGURO)
    console.log('üóëÔ∏è  ETAPA 1: REMOVENDO TABELAS TEMPOR√ÅRIAS/CACHE')
    console.log('------------------------------------------------')
    
    const safeDeletions = [
      { table: 'facet_cache', reason: 'Cache de facetas - pode ser recriado' },
      { table: 'pending_refreshes', reason: 'Fila de atualiza√ß√µes tempor√°ria' },
      { table: 'query_cache', reason: 'Cache de queries - pode ser recriado' },
      { table: 'shipping_carriers_temp', reason: 'Tabela tempor√°ria de transportadoras' }
    ]
    
    for (const { table, reason } of safeDeletions) {
      try {
        const count = await connector.queryNeon(`SELECT COUNT(*) as total FROM ${table}`)
        console.log(`\nüîç Analisando ${table}:`)
        console.log(`   ‚Ä¢ Registros: ${count.rows[0].total}`)
        console.log(`   ‚Ä¢ Motivo: ${reason}`)
        
        await connector.queryNeon(`DROP TABLE IF EXISTS ${table} CASCADE`)
        console.log(`   ‚úÖ Removida com sucesso`)
        
      } catch (error) {
        console.log(`   ‚ùå Erro ao remover ${table}: ${error.message}`)
      }
    }
    
    // ETAPA 2: ANALISAR TABELAS SUSPEITAS
    console.log('\n\nüîç ETAPA 2: ANALISANDO TABELAS SUSPEITAS')
    console.log('---------------------------------------')
    
    const suspiciousTables = [
      'collection_products',
      'products_with_primary_category', 
      'product_option_values',
      'product_options',
      'variant_option_values'
    ]
    
    for (const table of suspiciousTables) {
      try {
        const count = await connector.queryNeon(`SELECT COUNT(*) as total FROM ${table}`)
        const columns = await connector.queryNeon(`
          SELECT column_name
          FROM information_schema.columns 
          WHERE table_name = $1 
          ORDER BY ordinal_position
        `, [table])
        
        console.log(`\nüìã ${table.toUpperCase()}:`)
        console.log(`   ‚Ä¢ Registros: ${count.rows[0].total}`)
        console.log(`   ‚Ä¢ Colunas: ${columns.rows.map(c => c.column_name).join(', ')}`)
        
        // An√°lise espec√≠fica por tabela
        if (table === 'collection_products') {
          console.log(`   üîç Verificando se √© duplicata de product_collections...`)
          try {
            const pcCount = await connector.queryNeon(`SELECT COUNT(*) as total FROM product_collections`)
            console.log(`   ‚Ä¢ product_collections tem: ${pcCount.rows[0].total} registros`)
            
            if (count.rows[0].total === 0 && pcCount.rows[0].total > 0) {
              console.log(`   üí° RECOMENDA√á√ÉO: REMOVER - √â duplicata vazia de product_collections`)
            } else {
              console.log(`   ‚ö†Ô∏è  MANTER - Pode ter estrutura diferente`)
            }
          } catch (e) {
            console.log(`   ‚ö†Ô∏è  MANTER - N√£o foi poss√≠vel comparar`)
          }
        }
        
        else if (table === 'products_with_primary_category') {
          console.log(`   üîç Analisando se √© view materializada...`)
          if (count.rows[0].total > 0) {
            console.log(`   üí° RECOMENDA√á√ÉO: MANTER - Cont√©m dados, pode ser view otimizada`)
          } else {
            console.log(`   üí° RECOMENDA√á√ÉO: REMOVER - Vazia e pode ser recriada`)
          }
        }
        
        else if (table.includes('option')) {
          console.log(`   üîç Sistema de op√ß√µes de produtos...`)
          if (count.rows[0].total === 0) {
            console.log(`   üí° RECOMENDA√á√ÉO: MANTER - Ser√° usado para varia√ß√µes futuras`)
          } else {
            console.log(`   üí° RECOMENDA√á√ÉO: MANTER - Cont√©m dados ativos`)
          }
        }
        
      } catch (error) {
        console.log(`\n‚ùå Erro ao analisar ${table}: ${error.message}`)
      }
    }
    
    // ETAPA 3: REMOVER TABELAS VAZIAS OBSOLETAS
    console.log('\n\nüóëÔ∏è  ETAPA 3: REMOVENDO TABELAS VAZIAS OBSOLETAS')
    console.log('----------------------------------------------')
    
    const emptyObsolete = [
      { table: 'financial_adjustments', reason: 'Funcionalidade n√£o implementada' },
      { table: 'order_tracking', reason: 'Redundante com order_status_history' },
      { table: 'payment_queue', reason: 'Sistema de filas n√£o utilizado' },
      { table: 'store_credits', reason: 'Funcionalidade n√£o implementada' },
      { table: 'product_price_history', reason: 'Hist√≥rico n√£o sendo usado' }
    ]
    
    for (const { table, reason } of emptyObsolete) {
      try {
        const count = await connector.queryNeon(`SELECT COUNT(*) as total FROM ${table}`)
        
        if (count.rows[0].total === 0) {
          console.log(`\nüîç ${table}:`)
          console.log(`   ‚Ä¢ Registros: ${count.rows[0].total}`)
          console.log(`   ‚Ä¢ Motivo: ${reason}`)
          
          await connector.queryNeon(`DROP TABLE IF EXISTS ${table} CASCADE`)
          console.log(`   ‚úÖ Removida com sucesso`)
        } else {
          console.log(`\n‚ö†Ô∏è  ${table}: Mantida (${count.rows[0].total} registros)`)
        }
        
      } catch (error) {
        console.log(`\n‚ùå Erro com ${table}: ${error.message}`)
      }
    }
    
    // ETAPA 4: VERIFICAR DUPLICATAS ESPEC√çFICAS
    console.log('\n\nüîÑ ETAPA 4: VERIFICANDO DUPLICATAS ESPEC√çFICAS')
    console.log('---------------------------------------------')
    
    try {
      // Verificar collection_products vs product_collections
      const cp = await connector.queryNeon(`SELECT COUNT(*) as total FROM collection_products`)
      const pc = await connector.queryNeon(`SELECT COUNT(*) as total FROM product_collections`)
      
      console.log(`\nüìä Compara√ß√£o collection_products vs product_collections:`)
      console.log(`   ‚Ä¢ collection_products: ${cp.rows[0].total} registros`)
      console.log(`   ‚Ä¢ product_collections: ${pc.rows[0].total} registros`)
      
      if (cp.rows[0].total === 0 && pc.rows[0].total >= 0) {
        console.log(`   üí° collection_products est√° vazia, product_collections √© a ativa`)
        await connector.queryNeon(`DROP TABLE IF EXISTS collection_products CASCADE`)
        console.log(`   ‚úÖ collection_products removida (duplicata vazia)`)
      }
      
    } catch (error) {
      console.log(`   ‚ùå Erro na verifica√ß√£o de duplicatas: ${error.message}`)
    }
    
    // RESUMO FINAL
    console.log('\n\nüìä RESUMO DA LIMPEZA')
    console.log('===================')
    
    const finalCount = await connector.queryNeon(`
      SELECT COUNT(*) as total 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
    `)
    
    console.log(`\n‚úÖ Limpeza conclu√≠da!`)
    console.log(`   ‚Ä¢ Tabelas restantes: ${finalCount.rows[0].total}`)
    console.log(`   ‚Ä¢ Removidas: Apenas redundantes/tempor√°rias`)
    console.log(`   ‚Ä¢ Mantidas: TODAS as funcionais (marketing, A/B, gift lists, chat, GDPR, etc.)`)
    
    console.log(`\nüéØ PR√ìXIMOS PASSOS:`)
    console.log(`   1. ‚úÖ API de imagens implementada`)
    console.log(`   2. ‚úÖ Limpeza de tabelas redundantes conclu√≠da`)
    console.log(`   3. üöÄ Sistema pronto para implementar funcionalidades avan√ßadas`)
    
    await connector.disconnect()
    
  } catch (error) {
    console.error('‚ùå Erro na limpeza:', error.message)
    await connector.disconnect()
    process.exit(1)
  }
}

cleanRedundantTables() 