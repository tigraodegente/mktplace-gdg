#!/usr/bin/env node

import { DatabaseConnector } from './sync/utils/db-connector.mjs'
import ora from 'ora'

async function implementCategoryHierarchy() {
  const connector = new DatabaseConnector({ forceConnection: true })
  const spinner = ora()
  
  try {
    await connector.connectNeon()
    
    console.log('üîß IMPLEMENTANDO HIERARQUIA DE CATEGORIAS\n')
    
    // Definir estrutura hier√°rquica
    const hierarchy = {
      'Almofadas': {
        slug: 'almofadas',
        subcategories: [
          'Almofada Quarto de Beb√™',
          'Almofadas Decorativas (filtro)',
          'Almofada Amamenta√ß√£o'
        ]
      },
      'Decora√ß√£o': {
        slug: 'decoracao',
        subcategories: [
          'Quadros e Pain√©is',
          'Adesivo Parede Quarto de Beb√™',
          'Papel de Parede',
          'Objetos Decorativos',
          'Abajur',
          'Varal Decorativo',
          'Enfeites Puxador',
          'Quadros Bastidores Quarto de Beb√™',
          'M√≥bile Quarto de Beb√™'
        ]
      },
      'Quarto de Beb√™': {
        slug: 'quarto-de-bebe',
        subcategories: [
          'Cortina Quarto de Beb√™',
          'Cortinas Quarto de Beb√™',
          'Dossel Ber√ßo',
          'Farmacinha Quarto de Beb√™',
          'Fronha Ber√ßo Beb√™',
          'Kit Acess√≥rios Quarto de Beb√™',
          'Kit Ber√ßo',
          'Kit Mini Ber√ßo + Ber√ßo',
          'Len√ßol de Ber√ßo',
          'Lixeiras Quarto de Beb√™',
          'Organizador de Ber√ßo',
          'Porta Fraldas Quarto de Beb√™',
          'Potes Quarto de Beb√™',
          'Prateleiras Quarto de Beb√™',
          'Saia Ber√ßo',
          'Saia Ber√ßo ',
          'Tapete Quarto de Beb√™',
          'Tapetes Redondos Quarto de Beb√™ ',
          'Mosquiteiro Beb√™',
          'Rolinho Protetor'
        ]
      },
      'Enxoval': {
        slug: 'enxoval',
        subcategories: [
          'Len√ßol',
          'Len√ßol ',
          'Edredom',
          'Edredons',
          'Kit Cama Bab√°',
          'Manta e Cobertor',
          'Cobertor',
          'Sacos de Dormir'
        ]
      },
      'Roupas e Acess√≥rios': {
        slug: 'roupas-e-acessorios',
        subcategories: [
          'Roupinhas',
          'Babador Beb√™',
          'Conjuntos',
          'Vestido',
          'Toalha Beb√™',
          'Roup√µes Infantis',
          'Cabide Roupinha Beb√™',
          'Fantasia'
        ]
      },
      'Organiza√ß√£o': {
        slug: 'organizacao',
        subcategories: [
          'Cestos Organizadores',
          'Cestas',
          'Porta Beb√™',
          'Porta Maternidade'
        ]
      },
      'Maternidade': {
        slug: 'maternidade',
        subcategories: [
          'Bolsa Maternidade',
          'Bolsa Infantil',
          'Kit Bolsas Maternidade',
          'Saquinhos Maternidade',
          'Lembrancinha Maternidade'
        ]
      },
      'Alimenta√ß√£o e Higiene': {
        slug: 'alimentacao-e-higiene',
        subcategories: [
          'Alimenta√ß√£o',
          'Mamadeiras',
          'Chupeta',
          'Trocador',
          'Fralda e Cueiro',
          'Acess√≥rios para Banho',
          'Cuidados da Mam√£e e do Beb√™',
          'Cuidados do Beb√™'
        ]
      },
      'Brinquedos': {
        slug: 'brinquedos',
        subcategories: [
          'Brinquedos',
          'Pel√∫cia',
          'Ursinhos',
          'Ursinhos e Pel√∫cias',
          'Bonecas e Bonecos',
          'Tapete de Atividades',
          'Naninhas e Chocalhos'
        ]
      },
      'M√≥veis e Acess√≥rios': {
        slug: 'moveis-e-acessorios',
        subcategories: [
          'Capas Carrinho Cadeira Beb√™',
          'Mesas e Cadeiras',
          'Troninhos e Assentos',
          'Cadeirinha de Carro',
          'Carrinho de Beb√™',
          'Beb√™ Conforto',
          'Kit Montessoriano',
          'Cabanas e Tendas'
        ]
      },
      'Seguran√ßa': {
        slug: 'seguranca',
        subcategories: [
          'Acess√≥rios de Seguran√ßa',
          'Colch√µes e Protetores',
          'Ninho para Beb√™'
        ]
      },
      'Outros': {
        slug: 'outros',
        subcategories: [
          'Presentes',
          'Quarto Infantil',
          'Espelhos',
          'Joia',
          'Tapete Mesvers√°rio'
        ]
      }
    }
    
    // Buscar categorias existentes
    spinner.start('Carregando categorias existentes...')
    const existingCategoriesResult = await connector.queryNeon(`
      SELECT id, name, slug, parent_id
      FROM categories
    `)
    
    const existingCategories = new Map()
    existingCategoriesResult.rows.forEach(cat => {
      existingCategories.set(cat.name, cat)
    })
    spinner.succeed(`${existingCategories.size} categorias carregadas`)
    
    // Implementar hierarquia
    console.log('\nüìù Criando/Atualizando categorias...\n')
    
    for (const [parentName, parentData] of Object.entries(hierarchy)) {
      let parentId
      
      // Verificar se a categoria pai j√° existe
      const existingParent = existingCategories.get(parentName)
      
      if (existingParent) {
        parentId = existingParent.id
        console.log(`‚úÖ Categoria principal j√° existe: ${parentName}`)
      } else {
        // Criar categoria pai
        spinner.start(`Criando categoria principal: ${parentName}`)
        const result = await connector.queryNeon(
          `INSERT INTO categories (name, slug, is_active, parent_id, created_at)
           VALUES ($1, $2, true, NULL, NOW())
           RETURNING id`,
          [parentName, parentData.slug]
        )
        parentId = result.rows[0].id
        spinner.succeed(`Criada: ${parentName}`)
      }
      
      // Atualizar subcategorias
      for (const subName of parentData.subcategories) {
        const existingSub = existingCategories.get(subName)
        
        if (existingSub) {
          // Atualizar parent_id se necess√°rio
          if (existingSub.parent_id !== parentId) {
            await connector.queryNeon(
              `UPDATE categories 
               SET parent_id = $1, updated_at = NOW()
               WHERE id = $2`,
              [parentId, existingSub.id]
            )
            console.log(`   ‚îî‚îÄ ${subName} movida para ${parentName}`)
          } else {
            console.log(`   ‚îî‚îÄ ${subName} j√° est√° correta`)
          }
        } else {
          console.log(`   ‚ö†Ô∏è  Subcategoria n√£o encontrada: ${subName}`)
        }
      }
    }
    
    // Verificar resultados
    console.log('\nüìä VERIFICANDO RESULTADO...\n')
    
    const hierarchyResult = await connector.queryNeon(`
      WITH RECURSIVE category_tree AS (
        -- Categorias raiz
        SELECT 
          id, name, slug, parent_id, 
          0 as level,
          name::text as path
        FROM categories
        WHERE parent_id IS NULL
        
        UNION ALL
        
        -- Subcategorias
        SELECT 
          c.id, c.name, c.slug, c.parent_id,
          ct.level + 1,
          ct.path || ' > ' || c.name
        FROM categories c
        JOIN category_tree ct ON c.parent_id = ct.id
      )
      SELECT 
        ct.*,
        COUNT(DISTINCT pc.product_id) as product_count
      FROM category_tree ct
      LEFT JOIN product_categories pc ON ct.id = pc.category_id
      GROUP BY ct.id, ct.name, ct.slug, ct.parent_id, ct.level, ct.path
      ORDER BY ct.path
    `)
    
    console.log('üìÅ HIERARQUIA FINAL:\n')
    
    let lastLevel = -1
    hierarchyResult.rows.forEach(cat => {
      const indent = '  '.repeat(cat.level)
      const icon = cat.level === 0 ? 'üìÅ' : '‚îî‚îÄ'
      
      if (cat.level === 0 && lastLevel >= 0) {
        console.log('') // Linha em branco entre categorias principais
      }
      
      console.log(`${indent}${icon} ${cat.name} (${cat.product_count} produtos)`)
      lastLevel = cat.level
    })
    
    // Estat√≠sticas finais
    const statsResult = await connector.queryNeon(`
      SELECT 
        COUNT(*) FILTER (WHERE parent_id IS NULL) as main_categories,
        COUNT(*) FILTER (WHERE parent_id IS NOT NULL) as subcategories,
        COUNT(*) as total
      FROM categories
    `)
    
    const stats = statsResult.rows[0]
    console.log('\nüìà ESTAT√çSTICAS FINAIS:\n')
    console.log(`   Categorias principais: ${stats.main_categories}`)
    console.log(`   Subcategorias: ${stats.subcategories}`)
    console.log(`   Total: ${stats.total}`)
    
    // Verificar categorias √≥rf√£s (sem pai definido na hierarquia)
    const orphansResult = await connector.queryNeon(`
      SELECT name, slug
      FROM categories
      WHERE parent_id IS NULL
      AND name NOT IN (${Object.keys(hierarchy).map((_, i) => `$${i + 1}`).join(',')})
    `, Object.keys(hierarchy))
    
    if (orphansResult.rows.length > 0) {
      console.log('\n‚ö†Ô∏è  CATEGORIAS √ìRF√ÉS (sem categoria pai definida):')
      orphansResult.rows.forEach(cat => {
        console.log(`   - ${cat.name} (${cat.slug})`)
      })
    }
    
    console.log('\n‚úÖ HIERARQUIA IMPLEMENTADA COM SUCESSO!')
    
  } catch (error) {
    spinner.fail('Erro durante o processo')
    console.error('‚ùå Erro:', error)
  } finally {
    await connector.disconnect()
  }
}

// Executar
console.log('üöÄ Implementando hierarquia de categorias...\n')
implementCategoryHierarchy() 