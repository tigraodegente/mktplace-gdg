#!/usr/bin/env node

import { DatabaseConnector } from './sync/utils/db-connector.mjs'

async function analyzeProductSalesCriteria() {
  const connector = new DatabaseConnector({ forceConnection: true })
  
  try {
    console.log('üîç ANALISANDO CRIT√âRIOS DE PRODUTOS √Ä VENDA NO MONGODB\n')
    
    await connector.connectMongo()
    const db = connector.getMongoDb()
    const collection = db.collection('m_product_typesense')
    
    // 1. Pegar uma amostra de produtos para ver TODOS os campos
    console.log('üìä ANALISANDO ESTRUTURA COMPLETA DOS PRODUTOS:\n')
    
    const sampleProducts = await collection.find({}).limit(3).toArray()
    
    console.log('üîç CAMPOS ENCONTRADOS EM PRODUTOS DE AMOSTRA:')
    const allFields = new Set()
    
    sampleProducts.forEach((product, i) => {
      console.log(`\n${i + 1}. Produto: ${product.productname || product.productid}`)
      console.log('   Campos dispon√≠veis:')
      
      Object.keys(product).forEach(key => {
        allFields.add(key)
        const value = product[key]
        const type = typeof value
        const preview = type === 'object' ? 
          (Array.isArray(value) ? `Array[${value.length}]` : 'Object') :
          type === 'string' ? `"${value.substring(0, 50)}${value.length > 50 ? '...' : ''}"` :
          value
        
        console.log(`      ${key}: ${type} = ${preview}`)
      })
    })
    
    // 2. Analisar campos relacionados a vendas/ativa√ß√£o
    console.log('\n\nüéØ AN√ÅLISE DE CAMPOS RELACIONADOS A VENDAS:\n')
    
    const salesFields = [
      'isactive', 'activeforseo', 'active', 'status', 'visible',
      'realstock', 'virtualstock', 'stock', 'quantity',
      'price', 'salesprice', 'promotionalprice', 'originalPrice',
      'sold', 'sales', 'salescount', 'ordercount', 'popularity',
      'featured', 'bestseller', 'trending', 'promoted',
      'available', 'instock', 'outofstock',
      'createdAt', 'updatedAt', 'lastSold', 'lastOrder'
    ]
    
    for (const field of salesFields) {
      const count = await collection.countDocuments({ [field]: { $exists: true } })
      const countTrue = await collection.countDocuments({ [field]: true })
      const countFalse = await collection.countDocuments({ [field]: false })
      const countGreaterZero = await collection.countDocuments({ [field]: { $gt: 0 } })
      
      if (count > 0) {
        console.log(`üìä ${field}:`)
        console.log(`   Existe em: ${count} produtos`)
        if (countTrue > 0) console.log(`   true: ${countTrue}`)
        if (countFalse > 0) console.log(`   false: ${countFalse}`)
        if (countGreaterZero > 0) console.log(`   > 0: ${countGreaterZero}`)
        
        // Mostrar valores √∫nicos para campos pequenos
        if (count < 20) {
          const uniqueValues = await collection.distinct(field)
          console.log(`   Valores √∫nicos: ${uniqueValues.slice(0, 10).join(', ')}`)
        }
        console.log('')
      }
    }
    
    // 3. Analisar produtos por diferentes crit√©rios
    console.log('üéØ COMPARA√á√ÉO DE CRIT√âRIOS DIFERENTES:\n')
    
    const criteria = [
      {
        name: 'Apenas isactive=true',
        filter: { isactive: true }
      },
      {
        name: 'Apenas activeforseo=true', 
        filter: { activeforseo: true }
      },
      {
        name: 'isactive=true OU activeforseo=true',
        filter: { $or: [{ isactive: true }, { activeforseo: true }] }
      },
      {
        name: 'Com realstock > 0',
        filter: { realstock: { $gt: 0 } }
      },
      {
        name: 'Com qualquer estoque > 0',
        filter: { $or: [{ realstock: { $gt: 0 } }, { virtualstock: { $gt: 0 } }, { stock: { $gt: 0 } }] }
      },
      {
        name: 'Com pre√ßo > 0',
        filter: { price: { $gt: 0 } }
      },
      {
        name: 'VEND√ÅVEIS (minha defini√ß√£o atual)',
        filter: {
          $and: [
            { $or: [{ isactive: true }, { activeforseo: true }] },
            { $or: [{ realstock: { $gt: 0 } }, { virtualstock: { $gt: 0 } }, { stock: { $gt: 0 } }] },
            { price: { $gt: 0 } },
            { productname: { $exists: true, $ne: '' } }
          ]
        }
      }
    ]
    
    for (const criterion of criteria) {
      const count = await collection.countDocuments(criterion.filter)
      console.log(`${criterion.name}: ${count} produtos`)
    }
    
    // 4. Verificar se h√° campos de data/movimenta√ß√£o
    console.log('\nüìÖ ANALISANDO CAMPOS DE DATA E MOVIMENTA√á√ÉO:\n')
    
    const dateFields = ['createdAt', 'updatedAt', 'lastSold', 'lastOrder', 'lastUpdate']
    
    for (const field of dateFields) {
      const count = await collection.countDocuments({ [field]: { $exists: true } })
      if (count > 0) {
        const recent = await collection.countDocuments({ 
          [field]: { $gte: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000) } // √öltimos 30 dias
        })
        console.log(`üìÖ ${field}: ${count} produtos t√™m este campo (${recent} nos √∫ltimos 30 dias)`)
      }
    }
    
    // 5. Sugest√µes
    console.log('\nüí° PERGUNTAS PARA DEFINIR CRIT√âRIOS CORRETOS:\n')
    console.log('1. Quais campos voc√™ usa no sistema atual para determinar se um produto est√° "√† venda"?')
    console.log('2. H√° algum campo de status espec√≠fico que indica vendas ativas?')
    console.log('3. Voc√™ considera "movimenta√ß√£o recente" ou apenas status ativo + estoque?')
    console.log('4. H√° produtos sazonais ou com regras especiais de disponibilidade?')
    console.log('5. Qual a diferen√ßa entre "isactive" e "activeforseo"?')
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message)
  } finally {
    await connector.disconnect()
  }
}

analyzeProductSalesCriteria() 