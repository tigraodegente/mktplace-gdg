#!/usr/bin/env node

async function testPaymentQueue() {
  console.log('üß™ TESTE DO PROCESSADOR DE FILA DE PAGAMENTOS\n');

  const BASE_URL = 'http://localhost:5173';
  
  try {
    console.log('üîÑ Executando processador de fila...');
    
    const response = await fetch(`${BASE_URL}/api/payments/process-queue`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    });

    const result = await response.json();
    
    console.log(`üìä Status: ${response.status}`);
    console.log(`üìã Resultado:`, JSON.stringify(result, null, 2));
    
    if (result.success) {
      const { processed, results } = result.data;
      
      console.log(`\n‚úÖ Processamento conclu√≠do:`);
      console.log(`   ‚Ä¢ Itens processados: ${processed}`);
      
      if (results && results.length > 0) {
        console.log(`\nüìÑ Detalhes dos processamentos:`);
        results.forEach((item, index) => {
          console.log(`   ${index + 1}. ${item.status.toUpperCase()}`);
          console.log(`      Queue ID: ${item.queueId}`);
          console.log(`      Payment ID: ${item.paymentId}`);
          console.log(`      Tentativas: ${item.attempts}`);
          
          if (item.status === 'retrying' && item.nextAttempt) {
            console.log(`      Pr√≥xima tentativa: ${new Date(item.nextAttempt).toLocaleString()}`);
          }
          
          if (item.error) {
            console.log(`      Erro: ${item.error}`);
          }
          console.log('');
        });
      }
      
      if (processed === 0) {
        console.log('‚ÑπÔ∏è Nenhum item na fila para processar');
      }
      
    } else {
      console.error('‚ùå Erro no processamento:', result.error);
    }
    
    console.log('\nüéä Teste conclu√≠do!');
    console.log('\nüìã O que acontece quando um pagamento falha:');
    console.log('   1. Primeira falha ‚Üí attempts = 1, status = "retrying", retry em 1min');
    console.log('   2. Segunda falha ‚Üí attempts = 2, status = "retrying", retry em 2min');
    console.log('   3. Terceira falha ‚Üí attempts = 3, status = "failed", n√£o retenta mais');
    console.log('   4. Pedido √© cancelado e estoque √© restaurado');
    console.log('   5. Email de falha √© enviado ao cliente');

  } catch (error) {
    console.error('‚ùå Erro na conex√£o:', error.message);
    console.log('\nüí° Certifique-se de que o servidor est√° rodando:');
    console.log('   npm run dev');
  }
}

// Executar se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  testPaymentQueue();
}

export { testPaymentQueue }; 