#!/usr/bin/env node

/**
 * Script para configurar o sistema de autentica√ß√£o do marketplace
 * Executa as migrations necess√°rias e cria usu√°rio admin inicial
 */

import { createDatabaseConnection, runMigrations, createUser } from '../packages/utils/dist/auth/database.js';
import { createAuthService } from '../packages/utils/dist/auth/auth-service.js';
import crypto from 'node:crypto';

const REQUIRED_ENV_VARS = [
  'DATABASE_URL',
  'JWT_SECRET'
];

async function validateEnvironment() {
  console.log('üîç Verificando vari√°veis de ambiente...');
  
  const missing = REQUIRED_ENV_VARS.filter(env => !process.env[env]);
  
  if (missing.length > 0) {
    console.error('‚ùå Vari√°veis de ambiente obrigat√≥rias n√£o encontradas:');
    missing.forEach(env => console.error(`   - ${env}`));
    console.error('\nüí° Crie um arquivo .env com as vari√°veis necess√°rias.');
    process.exit(1);
  }
  
  console.log('‚úÖ Todas as vari√°veis de ambiente est√£o configuradas!');
}

async function runDatabaseMigrations() {
  console.log('\nüóÑÔ∏è  Executando migrations do banco de dados...');
  
  try {
    const env = {
      DATABASE_URL: process.env.DATABASE_URL,
      NEON_DATABASE_URL: process.env.NEON_DATABASE_URL
    };
    
    await runMigrations(env);
    console.log('‚úÖ Migrations executadas com sucesso!');
  } catch (error) {
    console.error('‚ùå Erro ao executar migrations:', error.message);
    process.exit(1);
  }
}

async function createAdminUser() {
  console.log('\nüë§ Criando usu√°rio administrador...');
  
  try {
    const authService = createAuthService({
      jwtSecret: process.env.JWT_SECRET
    });
    
    const env = {
      DATABASE_URL: process.env.DATABASE_URL,
      NEON_DATABASE_URL: process.env.NEON_DATABASE_URL
    };
    
    // Dados do admin (voc√™ pode personalizar)
    const adminData = {
      email: process.env.ADMIN_EMAIL || 'admin@mktplace.com',
      name: process.env.ADMIN_NAME || 'Administrador',
      password: process.env.ADMIN_PASSWORD || 'admin123456',
      role: 'super_admin'
    };
    
    // Hash da senha
    const passwordHash = await authService.hashPassword(adminData.password);
    
    // Criar usu√°rio
    const user = await createUser({
      email: adminData.email,
      name: adminData.name,
      password_hash: passwordHash,
      role: adminData.role
    }, env);
    
    if (user) {
      console.log('‚úÖ Usu√°rio administrador criado com sucesso!');
      console.log(`   Email: ${adminData.email}`);
      console.log(`   Senha: ${adminData.password}`);
      console.log(`   Role: ${adminData.role}`);
      console.log('\n‚ö†Ô∏è  IMPORTANTE: Altere a senha ap√≥s o primeiro login!');
    } else {
      console.log('‚ö†Ô∏è  Usu√°rio administrador j√° existe ou erro na cria√ß√£o.');
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao criar usu√°rio administrador:', error.message);
    
    if (error.message.includes('duplicate key')) {
      console.log('‚ÑπÔ∏è  Usu√°rio administrador j√° existe.');
    } else {
      process.exit(1);
    }
  }
}

async function generateJWTSecret() {
  if (!process.env.JWT_SECRET) {
    console.log('\nüîê Gerando JWT Secret...');
    const secret = crypto.randomBytes(64).toString('hex');
    console.log(`JWT_SECRET=${secret}`);
    console.log('\nüí° Adicione esta linha ao seu arquivo .env');
    return secret;
  }
  return process.env.JWT_SECRET;
}

async function testAuthentication() {
  console.log('\nüß™ Testando sistema de autentica√ß√£o...');
  
  try {
    const authService = createAuthService({
      jwtSecret: process.env.JWT_SECRET
    });
    
    // Teste b√°sico de gera√ß√£o de token
    const testUser = {
      id: 'test-user',
      email: 'test@example.com',
      name: 'Test User',
      role: 'admin',
      is_active: true
    };
    
    const tokens = authService.generateTokens(testUser);
    const payload = authService.verifyToken(tokens.accessToken);
    
    if (payload && payload.userId === testUser.id) {
      console.log('‚úÖ Sistema de autentica√ß√£o funcionando corretamente!');
    } else {
      throw new Error('Falha na verifica√ß√£o do token');
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste de autentica√ß√£o:', error.message);
    process.exit(1);
  }
}

async function main() {
  console.log('üöÄ CONFIGURA√á√ÉO DO SISTEMA DE AUTENTICA√á√ÉO');
  console.log('==========================================\n');
  
  try {
    // 1. Validar ambiente
    await validateEnvironment();
    
    // 2. Gerar JWT Secret se necess√°rio
    await generateJWTSecret();
    
    // 3. Executar migrations
    await runDatabaseMigrations();
    
    // 4. Criar usu√°rio admin
    await createAdminUser();
    
    // 5. Testar autentica√ß√£o
    await testAuthentication();
    
    console.log('\nüéâ CONFIGURA√á√ÉO CONCLU√çDA COM SUCESSO!');
    console.log('=====================================');
    console.log('\nüìã Pr√≥ximos passos:');
    console.log('1. Acesse o painel admin em: http://localhost:5174/login');
    console.log('2. Fa√ßa login com as credenciais criadas');
    console.log('3. Altere a senha padr√£o');
    console.log('4. Configure outros usu√°rios conforme necess√°rio');
    
  } catch (error) {
    console.error('\nüí• Erro durante a configura√ß√£o:', error.message);
    process.exit(1);
  }
}

// Executar apenas se chamado diretamente
if (process.argv[1].endsWith('setup-auth.js')) {
  main().catch(console.error);
} 