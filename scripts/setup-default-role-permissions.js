#!/usr/bin/env node

import { fileURLToPath } from 'url';
import path from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function setupDefaultRolePermissions() {
  try {
    console.log('üöÄ Configurando permiss√µes padr√£o por role...');
    
    // Conectar ao banco
    const { default: postgres } = await import('postgres');
    
    const databaseUrl = process.env.DATABASE_URL || 'postgresql://neondb_owner:npg_wS8ux1paQcqY@ep-dawn-field-acydf752-pooler.sa-east-1.aws.neon.tech/neondb?sslmode=require';
    
    const sql = postgres(databaseUrl, {
      ssl: 'require',
      max: 1
    });
    
    console.log('üì¶ Conectado ao banco de dados');
    
    // Limpar permiss√µes existentes por role
    await sql`DELETE FROM role_permissions`;
    console.log('üßπ Permiss√µes de roles limpas');
    
    // Permiss√µes para ADMIN (acesso total)
    const adminPermissions = [
      // Usu√°rios
      'users.read', 'users.write', 'users.delete', 'users.manage_permissions',
      // Produtos
      'products.read', 'products.write', 'products.delete', 'products.moderate',
      // Pedidos  
      'orders.read', 'orders.write', 'orders.cancel', 'orders.refund',
      // Vendedores
      'sellers.read', 'sellers.write', 'sellers.approve', 'sellers.suspend',
      // Cat√°logo
      'catalog.read', 'catalog.write', 'catalog.categories', 'catalog.brands',
      // Promo√ß√µes
      'promotions.read', 'promotions.write', 'promotions.approve',
      // Relat√≥rios
      'reports.sales', 'reports.users', 'reports.financial', 'reports.analytics',
      // Sistema
      'system.settings', 'system.maintenance', 'system.logs',
      // Financeiro
      'financial.read', 'financial.write', 'financial.reports'
    ];
    
    // Permiss√µes para VENDOR (vendedor)
    const vendorPermissions = [
      // Produtos pr√≥prios
      'products.read', 'products.write',
      // Pedidos pr√≥prios
      'orders.read', 'orders.write',
      // Cat√°logo (leitura)
      'catalog.read',
      // Relat√≥rios pr√≥prios
      'reports.sales'
    ];
    
    // Permiss√µes para CUSTOMER (cliente)
    const customerPermissions = [
      // Produtos (leitura)
      'products.read',
      // Pedidos pr√≥prios
      'orders.read',
      // Cat√°logo (leitura)
      'catalog.read'
    ];
    
    // Inserir permiss√µes para ADMIN
    for (const permission of adminPermissions) {
      try {
        await sql`
          INSERT INTO role_permissions (role, permission_id) 
          SELECT 'admin', id FROM permissions WHERE name = ${permission}
          ON CONFLICT (role, permission_id) DO NOTHING
        `;
      } catch (error) {
        console.warn(`‚ö†Ô∏è Erro ao inserir permiss√£o admin ${permission}:`, error.message);
      }
    }
    console.log(`‚úÖ ${adminPermissions.length} permiss√µes configuradas para ADMIN`);
    
    // Inserir permiss√µes para VENDOR
    for (const permission of vendorPermissions) {
      try {
        await sql`
          INSERT INTO role_permissions (role, permission_id) 
          SELECT 'vendor', id FROM permissions WHERE name = ${permission}
          ON CONFLICT (role, permission_id) DO NOTHING
        `;
      } catch (error) {
        console.warn(`‚ö†Ô∏è Erro ao inserir permiss√£o vendor ${permission}:`, error.message);
      }
    }
    console.log(`‚úÖ ${vendorPermissions.length} permiss√µes configuradas para VENDOR`);
    
    // Inserir permiss√µes para CUSTOMER
    for (const permission of customerPermissions) {
      try {
        await sql`
          INSERT INTO role_permissions (role, permission_id) 
          SELECT 'customer', id FROM permissions WHERE name = ${permission}
          ON CONFLICT (role, permission_id) DO NOTHING
        `;
      } catch (error) {
        console.warn(`‚ö†Ô∏è Erro ao inserir permiss√£o customer ${permission}:`, error.message);
      }
    }
    console.log(`‚úÖ ${customerPermissions.length} permiss√µes configuradas para CUSTOMER`);
    
    // Verificar resultado
    const roleStats = await sql`
      SELECT 
        role,
        COUNT(*) as permissions_count
      FROM role_permissions 
      GROUP BY role
      ORDER BY role
    `;
    
    console.log('\nüìä Resumo das permiss√µes por role:');
    roleStats.forEach(stat => {
      console.log(`   ${stat.role}: ${stat.permissions_count} permiss√µes`);
    });
    
    await sql.end();
    
    console.log('\n‚úÖ Permiss√µes padr√£o configuradas com sucesso!');
    console.log('\nüéØ Pr√≥ximos passos:');
    console.log('   1. Implementar sistema de autentica√ß√£o');
    console.log('   2. Criar middleware de prote√ß√£o de rotas');
    console.log('   3. Testar PermissionGate com usu√°rio real');
    
  } catch (error) {
    console.error('‚ùå Erro ao configurar permiss√µes:', error);
    process.exit(1);
  }
}

// Executar se chamado diretamente
setupDefaultRolePermissions(); 