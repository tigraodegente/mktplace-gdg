/**
 * üîß TESTE DAS CORRE√á√ïES NA VALIDA√á√ÉO
 * Simula cen√°rios realistas com as melhorias aplicadas
 */

// Simular produto base dos logs reais
const baseProduct = {
    id: '2d2fe541-13a1-49a8-b85d-4b84bb4f0ad8',
    name: 'Almofada Amamenta√ß√£o Azul Marinho',
    brand_id: '5885e6cf-63ef-4f26-a7e3-1129f285703c',
    price: 142.39, // Pre√ßo dos logs reais
    sku: '154227'
};

// Produtos candidatos com cen√°rios realistas
const candidateProducts = [
    {
        id: 'cand-1',
        name: 'Almofada Amamenta√ß√£o Cappuccino',
        brand_id: '5885e6cf-63ef-4f26-a7e3-1129f285703c',
        price: 142.39, // Mesmo pre√ßo
        sku: '154226'
    },
    {
        id: 'cand-2',
        name: 'Almofada Amamenta√ß√£o Creme',
        brand_id: '5885e6cf-63ef-4f26-a7e3-1129f285703c',
        price: 144.50, // 1.5% diferen√ßa - deveria passar com 5% toler√¢ncia
        sku: '154228'
    },
    {
        id: 'cand-3',
        name: 'Almofada Amamenta√ß√£o Rosa Beb√™',
        brand_id: '5885e6cf-63ef-4f26-a7e3-1129f285703c',
        price: 139.99, // 1.7% diferen√ßa - deveria passar
        sku: '154229'
    },
    {
        id: 'cand-4',
        name: 'Almofada Amamenta√ß√£o Verde Menta',
        brand_id: '5885e6cf-63ef-4f26-a7e3-1129f285703c',
        price: 148.20, // 4.1% diferen√ßa - deveria passar
        sku: '154230'
    },
    {
        id: 'cand-5',
        name: 'Almofada Amamenta√ß√£o Alice Bege',
        brand_id: '5885e6cf-63ef-4f26-a7e3-1129f285703c',
        price: 142.39, // Mesmo pre√ßo mas tem tema "alice" - deveria ser rejeitado
        sku: '154231'
    },
    {
        id: 'cand-6',
        name: 'Almofada Amamenta√ß√£o Azul Cl√°ssico', 
        brand_id: '5885e6cf-63ef-4f26-a7e3-1129f285703c',
        price: 138.00, // 3.1% diferen√ßa - deveria passar
        sku: '154232'
    },
    {
        id: 'cand-7',
        name: 'Travesseiro de Beb√™ Rosa',
        brand_id: '5885e6cf-63ef-4f26-a7e3-1129f285703c',
        price: 142.39, // Mesmo pre√ßo mas produto diferente - deveria ser rejeitado
        sku: '154233'
    }
];

console.log('üîß TESTE DAS CORRE√á√ïES APLICADAS');
console.log('='.repeat(80));
console.log(`üî¨ PRODUTO BASE: "${baseProduct.name}"`);
console.log(`üí∞ Pre√ßo base: R$ ${baseProduct.price}`);
console.log(`üè∑Ô∏è Marca: ${baseProduct.brand_id}\n`);

console.log('üìä MELHORIAS APLICADAS:');
console.log('‚îÄ'.repeat(50));
console.log('‚úÖ Toler√¢ncia pre√ßo: 1% ‚Üí 5% (mais flex√≠vel)');
console.log('‚úÖ Similaridade nome: 85% ‚Üí 80% (mais inclusivo)');
console.log('‚úÖ Score m√≠nimo: 80% ‚Üí 70% (mais permissivo)');
console.log('‚úÖ Marca: tolerante a dados faltando');
console.log('‚úÖ Debug: logs detalhados adicionados\n');

console.log('üß™ TESTANDO VARIA√á√ïES COM CORRE√á√ïES:');
console.log('‚îÄ'.repeat(60));

let acceptedCount = 0;
let expectedAccepted = 0;

candidateProducts.forEach((candidate, index) => {
    console.log(`\n${index + 1}. TESTANDO: "${candidate.name}"`);
    console.log(`üí∞ R$ ${candidate.price} | Marca: ${candidate.brand_id}`);
    
    // Determinar resultado esperado
    const shouldBeAccepted = !candidate.name.toLowerCase().includes('alice') && 
                            !candidate.name.toLowerCase().includes('travesseiro');
    if (shouldBeAccepted) expectedAccepted++;
    
    const validation = simulateValidationWithCorrections(baseProduct, candidate);
    
    console.log(`üìä RESULTADO: ${validation.isValid ? '‚úÖ ACEITO' : '‚ùå REJEITADO'}`);
    console.log(`üìà Score: ${(validation.score * 100).toFixed(1)}% | Esperado: ${shouldBeAccepted ? '‚úÖ ACEITO' : '‚ùå REJEITADO'}`);
    
    if (validation.isValid) {
        acceptedCount++;
        validation.reasons.forEach(reason => console.log(`   ‚úì ${reason}`));
    } else {
        validation.rejectionReasons.forEach(reason => console.log(`   ‚ùå ${reason}`));
    }
    
    // Verificar se resultado est√° correto
    const correct = validation.isValid === shouldBeAccepted;
    console.log(`üéØ Resultado: ${correct ? '‚úÖ CORRETO' : '‚ùå INCORRETO'}`);
});

console.log(`\nüìä RESUMO FINAL:`)
console.log('='.repeat(80));
console.log(`‚úÖ Aceitos: ${acceptedCount}/${candidateProducts.length} produtos`);
console.log(`üéØ Esperados: ${expectedAccepted}/${candidateProducts.length} produtos`);
console.log(`üìà Precis√£o: ${acceptedCount === expectedAccepted ? '100%' : 'Precisar ajustes'}`);

const improvement = acceptedCount > 0 ? 'Sistema encontrando varia√ß√µes!' : 'Sistema ainda muito restritivo';
console.log(`üí° Status: ${improvement}`);

console.log(`\nüöÄ CONCLUS√ÉO:`);
console.log('‚îÄ'.repeat(40));
if (acceptedCount >= 4) {
    console.log('‚úÖ CORRE√á√ïES FUNCIONARAM: Sistema agora encontra as varia√ß√µes v√°lidas!');
    console.log('üéØ Rejeitou produtos tem√°ticos (Alice) e diferentes (Travesseiro)');
    console.log('üí∞ Toler√¢ncia de pre√ßo 5% permite varia√ß√µes de at√© R$ 7,12');
    console.log('üìù Similaridade 80% captura varia√ß√µes com descritores adicionais');
} else {
    console.log('‚ö†Ô∏è AINDA PRECISA AJUSTES: Sistema rejeitando muitas varia√ß√µes v√°lidas');
    console.log('üí° Considerar aumentar mais a toler√¢ncia ou revisar l√≥gica de nome');
}

function simulateValidationWithCorrections(baseProduct, candidateProduct) {
    const reasons = [];
    const rejectionReasons = [];
    let totalScore = 0;
    const maxScore = 100;
    
    // 1. üö® VALIDA√á√ÉO CR√çTICA: PRE√áO (5% toler√¢ncia)
    const basePrice = parseFloat(baseProduct.price || 0);
    const candidatePrice = parseFloat(candidateProduct.price || 0);
    
    if (basePrice > 0) {
        const priceDifference = Math.abs(basePrice - candidatePrice) / basePrice;
        
        if (priceDifference > 0.05) { // 5% toler√¢ncia
            rejectionReasons.push(`Pre√ßo muito diferente: ${(priceDifference * 100).toFixed(2)}% (limite: 5%)`);
            return { isValid: false, score: 0, reasons, rejectionReasons };
        } else {
            totalScore += 25;
            reasons.push(`Pre√ßo compat√≠vel: ${(priceDifference * 100).toFixed(2)}% diferen√ßa`);
        }
    }
    
    // 2. üö® VALIDA√á√ÉO CR√çTICA: TEMAS/PERSONAGENS
    const thematicWords = [
        'alice', 'simba', 'ursa', 'safari', 'selva', 'bosque', 'animais', 'princess', 'princesa',
        'amiguinha', 'amiguinho', 'encantada', 'baby', 'estrela', 'coracao', 'floral', 'listrado',
        'cacto', 'abobora', 'poa', 'estrelinhas', 'sophia', 'sofia', 'disney', 'marvel'
    ];
    
    const candidateName = candidateProduct.name.toLowerCase();
    const baseName = baseProduct.name.toLowerCase();
    
    const candidateHasTheme = thematicWords.some(theme => candidateName.includes(theme));
    const baseHasTheme = thematicWords.some(theme => baseName.includes(theme));
    
    if (!baseHasTheme && candidateHasTheme) {
        const foundTheme = thematicWords.find(theme => candidateName.includes(theme));
        rejectionReasons.push(`Produto candidato tem tema/personagem: "${foundTheme}"`);
        return { isValid: false, score: 0, reasons, rejectionReasons };
    }
    
    if (baseHasTheme && candidateHasTheme) {
        const baseTheme = thematicWords.find(theme => baseName.includes(theme));
        const candidateTheme = thematicWords.find(theme => candidateName.includes(theme));
        
        if (baseTheme !== candidateTheme) {
            rejectionReasons.push(`Temas diferentes: "${baseTheme}" vs "${candidateTheme}"`);
            return { isValid: false, score: 0, reasons, rejectionReasons };
        }
    }
    
    totalScore += 25;
    reasons.push('Compatibilidade tem√°tica validada');
    
    // 3. üìè VALIDA√á√ÉO: NOME BASE (80% similaridade)
    const nameCompatibility = calculateNameSimilarity(
        removeVariations(baseProduct.name),
        removeVariations(candidateProduct.name)
    );
    
    if (nameCompatibility < 0.80) { // 80% similaridade m√≠nima
        rejectionReasons.push(`Nome base muito diferente: ${(nameCompatibility * 100).toFixed(1)}% similaridade`);
        return { isValid: false, score: 0, reasons, rejectionReasons };
    }
    
    totalScore += 25;
    reasons.push(`Nome base compat√≠vel: ${(nameCompatibility * 100).toFixed(1)}% similaridade`);
    
    // 4. üè∑Ô∏è VALIDA√á√ÉO: MARCA (flex√≠vel)
    if (baseProduct.brand_id && candidateProduct.brand_id) {
        if (baseProduct.brand_id !== candidateProduct.brand_id) {
            rejectionReasons.push('Marcas diferentes');
            return { isValid: false, score: 0, reasons, rejectionReasons };
        }
        
        totalScore += 15;
        reasons.push('Mesma marca');
    }
    // Se n√£o tem marca, n√£o penaliza
    
    // Score final - crit√©rio mais flex√≠vel
    const finalScore = totalScore / maxScore;
    const hasEssentialValidations = totalScore >= 75; // Pre√ßo + Tema + Nome Base = 75 pontos
    const isValid = hasEssentialValidations || finalScore >= 0.70; // 70% m√≠nimo
    
    return {
        isValid,
        score: finalScore,
        reasons,
        rejectionReasons
    };
}

// Fun√ß√µes auxiliares
function removeVariations(name) {
    const patterns = [
        'azul', 'rosa', 'branco', 'preto', 'verde', 'amarelo', 'vermelho', 'roxo', 'cinza', 'marrom',
        'bege', 'creme', 'marinho', 'escuro', 'claro', 'cappuccino', 'coral', 'turquesa', 'nude', 'menta',
        'pp', 'p', 'm', 'g', 'gg', 'pequeno', 'medio', 'grande', 'mini', 'maxi',
        'baby', 'beb√™', 'classico', 'cl√°ssico'
    ];
    
    let cleanName = name.toLowerCase();
    patterns.forEach(pattern => {
        cleanName = cleanName.replace(new RegExp(`\\b${pattern}\\b`, 'gi'), '').trim();
    });
    
    return cleanName.replace(/\s+/g, ' ').trim();
}

function calculateNameSimilarity(name1, name2) {
    const words1 = name1.toLowerCase().split(/\s+/).filter(w => w.length > 2);
    const words2 = name2.toLowerCase().split(/\s+/).filter(w => w.length > 2);
    
    if (words1.length === 0 || words2.length === 0) return 0;
    
    const commonWords = words1.filter(word => words2.includes(word));
    const totalWords = new Set([...words1, ...words2]).size;
    
    return commonWords.length / totalWords;
} 