#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import dotenv from 'dotenv';
import OpenAI from 'openai';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const rootDir = path.resolve(__dirname, '..');
const envPath = path.join(rootDir, '.env.local');

console.log('üîß CONFIGURA√á√ÉO E TESTE DO AMBIENTE\n');
console.log('=' .repeat(50) + '\n');

// 1. Verificar se .env.local existe
if (!fs.existsSync(envPath)) {
  console.log('‚ùå Arquivo .env.local n√£o encontrado!');
  console.log('üìù Criando modelo de .env.local...\n');
  
  const envContent = `# ========================================
# üîê ARQUIVO .env.local - NUNCA COMMITAR!
# ========================================

# Database Connections
# --------------------
MONGODB_URI=mongodb+srv://gdg:FbiI3dOKYLGebzrb@back.9ssm3.mongodb.net/graodegente
NEON_DATABASE_URL=postgresql://neondb_owner:npg_wS8ux1paQcY@ep-raspy-meadow-acds6p80-pooler.sa-east-1.aws.neon.tech/neondb

# OpenAI Configuration
# --------------------
# ‚ö†Ô∏è SUBSTITUA COM SUA NOVA KEY DA OPENAI!
OPENAI_API_KEY=sk-proj-COLE-SUA-CHAVE-AQUI
OPENAI_MODEL=gpt-4-turbo-preview
OPENAI_MAX_TOKENS=2000
OPENAI_TEMPERATURE=0.7

# Rate Limiting
OPENAI_RATE_LIMIT_PER_MINUTE=20
OPENAI_RATE_LIMIT_PER_DAY=1000

# Cost Management
AI_COST_ALERT_THRESHOLD=100
AI_MONTHLY_BUDGET=200

# Feature Flags
ENABLE_AI_ENRICHMENT=true
ENABLE_ANTI_DETECTION=true
ENABLE_CONTENT_VALIDATION=true
ENABLE_COST_TRACKING=true

# Environment
NODE_ENV=development
`;

  fs.writeFileSync(envPath, envContent);
  console.log('‚úÖ Arquivo .env.local criado!');
  console.log(`üìç Local: ${envPath}\n`);
  console.log('‚ö†Ô∏è  IMPORTANTE:');
  console.log('1. Abra o arquivo e substitua OPENAI_API_KEY');
  console.log('2. Execute este script novamente ap√≥s configurar\n');
  process.exit(0);
}

// 2. Carregar vari√°veis
dotenv.config({ path: envPath });

console.log('üìã VERIFICANDO CONFIGURA√á√ÉO:\n');

// 3. Verificar vari√°veis essenciais
const requiredVars = {
  'OPENAI_API_KEY': process.env.OPENAI_API_KEY,
  'OPENAI_MODEL': process.env.OPENAI_MODEL,
  'NEON_DATABASE_URL': process.env.NEON_DATABASE_URL,
  'MONGODB_URI': process.env.MONGODB_URI
};

let hasErrors = false;

for (const [key, value] of Object.entries(requiredVars)) {
  if (!value || value.includes('COLE-SUA-CHAVE-AQUI')) {
    console.log(`‚ùå ${key}: N√ÉO CONFIGURADO!`);
    hasErrors = true;
  } else {
    // Mostrar apenas parte do valor por seguran√ßa
    const masked = value.substring(0, 10) + '...' + value.substring(value.length - 4);
    console.log(`‚úÖ ${key}: ${masked}`);
  }
}

console.log('\nüìä CONFIGURA√á√ÉO DA IA:');
console.log(`- Modelo: ${process.env.OPENAI_MODEL || 'N√ÉO DEFINIDO'}`);
console.log(`- Max Tokens: ${process.env.OPENAI_MAX_TOKENS || 'N√ÉO DEFINIDO'}`);
console.log(`- Temperature: ${process.env.OPENAI_TEMPERATURE || 'N√ÉO DEFINIDO'}`);
console.log(`- Rate Limit: ${process.env.OPENAI_RATE_LIMIT_PER_MINUTE || 'N√ÉO DEFINIDO'}/min`);
console.log(`- Budget Mensal: $${process.env.AI_MONTHLY_BUDGET || 'N√ÉO DEFINIDO'}`);

if (hasErrors) {
  console.log('\n‚ùå ERROS ENCONTRADOS!');
  console.log('Por favor, configure as vari√°veis faltantes no .env.local');
  process.exit(1);
}

// 4. Testar conex√£o com OpenAI
console.log('\nü§ñ TESTANDO OPENAI API...\n');

if (!process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY.includes('COLE-SUA-CHAVE-AQUI')) {
  console.log('‚ùå OPENAI_API_KEY n√£o configurada!');
  console.log('Por favor, adicione sua chave no arquivo .env.local');
  process.exit(1);
}

try {
  const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
  });

  console.log('üì° Fazendo chamada de teste...');
  
  const completion = await openai.chat.completions.create({
    model: process.env.OPENAI_MODEL || 'gpt-4-turbo-preview',
    messages: [
      {
        role: 'system',
        content: 'Voc√™ √© um assistente de teste. Responda brevemente.'
      },
      {
        role: 'user',
        content: 'Diga apenas "OK" se estiver funcionando.'
      }
    ],
    max_tokens: 10,
    temperature: 0.1
  });

  const response = completion.choices[0].message.content;
  console.log(`‚úÖ Resposta da API: "${response}"`);
  console.log(`‚úÖ Modelo usado: ${completion.model}`);
  console.log(`‚úÖ Tokens usados: ${completion.usage.total_tokens}`);
  
  // Calcular custo aproximado
  const inputCost = (completion.usage.prompt_tokens / 1000) * 0.01; // $0.01 per 1k
  const outputCost = (completion.usage.completion_tokens / 1000) * 0.03; // $0.03 per 1k
  const totalCost = inputCost + outputCost;
  
  console.log(`üí∞ Custo do teste: $${totalCost.toFixed(6)}`);

  // 5. Verificar .gitignore
  console.log('\nüîí VERIFICANDO SEGURAN√áA:\n');
  
  const gitignorePath = path.join(rootDir, '.gitignore');
  if (fs.existsSync(gitignorePath)) {
    const gitignoreContent = fs.readFileSync(gitignorePath, 'utf8');
    if (gitignoreContent.includes('.env.local')) {
      console.log('‚úÖ .env.local est√° no .gitignore');
    } else {
      console.log('‚ö†Ô∏è  AVISO: .env.local N√ÉO est√° no .gitignore!');
      console.log('Adicionando ao .gitignore...');
      fs.appendFileSync(gitignorePath, '\n# Local environment variables\n.env.local\n.env*.local\n');
      console.log('‚úÖ Adicionado ao .gitignore');
    }
  }

  // 6. Resumo final
  console.log('\n' + '=' .repeat(50));
  console.log('\nüéâ CONFIGURA√á√ÉO COMPLETA E FUNCIONANDO!\n');
  console.log('‚úÖ OpenAI API: Conectada');
  console.log('‚úÖ Modelo: ' + (process.env.OPENAI_MODEL || 'gpt-4-turbo-preview'));
  console.log('‚úÖ Databases: Configuradas');
  console.log('‚úÖ Seguran√ßa: .gitignore configurado');
  
  console.log('\nüìä ESTIMATIVA DE CUSTOS:');
  console.log('- Por produto: ~$0.02');
  console.log('- 2.633 produtos: ~$52.66');
  console.log('- Com reviews: ~$135.60 total');
  
  console.log('\nüöÄ PR√ìXIMOS PASSOS:');
  console.log('1. Execute: node scripts/enrich-products.mjs');
  console.log('2. Comece com 10 produtos de teste');
  console.log('3. Monitore os custos no dashboard da OpenAI');
  
} catch (error) {
  console.error('\n‚ùå ERRO AO TESTAR OPENAI:');
  console.error(error.message);
  
  if (error.message.includes('401')) {
    console.error('\n‚ö†Ô∏è  Chave de API inv√°lida!');
    console.error('Verifique se copiou a chave corretamente.');
  } else if (error.message.includes('429')) {
    console.error('\n‚ö†Ô∏è  Rate limit excedido!');
    console.error('Aguarde alguns minutos e tente novamente.');
  } else if (error.message.includes('insufficient_quota')) {
    console.error('\n‚ö†Ô∏è  Sem cr√©ditos na conta OpenAI!');
    console.error('Adicione cr√©ditos em: https://platform.openai.com/account/billing');
  }
  
  process.exit(1);
} 